---
import Section from "./Section.astro";

export interface Props {
  className?: string;
  scrollDirection?: "left" | "right";
  scrollSpeed?: number;
  backgroundColor?: string;
}

const {
  className = "",
  scrollDirection = "left",
  scrollSpeed = 1,
  backgroundColor = "!px-0 bg-secondary-300",
} = Astro.props;

// Company logos data
const logos = [
  {
    name: "Albron",
    src: "/brands/Albron.svg",
    alt: "Albron logo",
  },
  {
    name: "Albert Heijn",
    src: "/brands/Albert Heijn.svg",
    alt: "Albert Heijn logo",
  },
  {
    name: "BDO",
    src: "/brands/Bdo.svg",
    alt: "BDO logo",
  },
  {
    name: "Flynth",
    src: "/brands/Flynth.svg",
    alt: "Flynth logo",
  },
  {
    name: "Huijbregts",
    src: "/brands/Huijbregts.svg",
    alt: "Huijbregts logo",
  },
  {
    name: "Embora",
    src: "/brands/Embora.svg",
    alt: "Embora logo",
  },
  {
    name: "Croonwolter Dros",
    src: "/brands/Croonwolter Dros.svg",
    alt: "Croonwolter Dros logo",
  },
  {
    name: "Zeeman",
    src: "/brands/Zeeman.svg",
    alt: "Zeeman logo",
  },
  {
    name: "AAE",
    src: "/brands/aae.svg",
    alt: "AAE logo",
  },
  {
    name: "Aethon",
    src: "/brands/Aethon.svg",
    alt: "Aethon logo",
  },
  {
    name: "Toverland",
    src: "/brands/Toverland.svg",
    alt: "Toverland logo",
  },
  {
    name: "HVL",
    src: "/brands/hvl-logo.svg",
    alt: "HVL logo",
  },
  {
    name: "Van Hoof",
    src: "/brands/logo-van-hoof-black.svg",
    alt: "Van Hoof logo",
  },
];
---

<Section
  sectionClassName={backgroundColor}
  className={`w-full overflow-hidden relative !px-0 z-30  ${className}`}
  maxWidth="max-w-none "
>
  <div
    class="horizontal-logo-scroll-container h-16 md:h-20 lg:h-32 flex items-center"
  >
    <div
      class="horizontal-logo-track flex items-center gap-6 md:gap-8 lg:gap-12 h-full whitespace-nowrap"
      data-scroll-direction={scrollDirection}
      data-scroll-speed={scrollSpeed}
    >
      <!-- First set of logos -->
      {
        logos.map((logo) => (
          <div class="logo-item flex items-center justify-center h-12 md:h-14 lg:h-20   rounded-lg md:rounded-xl  transition-all duration-300 hover:scale-105 hover:shadow-xl flex-shrink-0 p-2 md:p-3">
            <img
              src={logo.src}
              alt={logo.alt}
              class="max-h-full max-w-full min-h-8 min-w-8 object-cover"
              loading="lazy"
            />
          </div>
        ))
      }

      <!-- Duplicate set for seamless loop -->
      {
        logos.map((logo) => (
          <div class="logo-item flex items-center justify-center h-12 md:h-14 lg:h-20  rounded-lg md:rounded-xl  transition-all duration-300 hover:scale-105 hover:shadow-xl flex-shrink-0 p-2 md:p-3">
            <img
              src={logo.src}
              alt={logo.alt}
              class="max-h-full max-w-full min-h-8 min-w-8 object-cover"
              loading="lazy"
            />
          </div>
        ))
      }

      <!-- Third set for extra smoothness -->
      {
        logos.map((logo) => (
          <div class="logo-item flex items-center justify-center h-12 md:h-14 lg:h-20 rounded-lg md:rounded-xl  transition-all duration-300 hover:scale-105 hover:shadow-xl flex-shrink-0 p-2 md:p-3">
            <img
              src={logo.src}
              alt={logo.alt}
              class="max-h-full max-w-full min-h-8 min-w-8 object-cover"
              loading="lazy"
            />
          </div>
        ))
      }
    </div>
  </div>
</Section>

<style>
  /* Ensure smooth performance */
  .horizontal-logo-scroll-container {
    will-change: transform;
  }

  .horizontal-logo-track {
    will-change: transform;
  }

  /* Logo hover effects */
  .logo-item:hover {
    transform: scale(1.05);
    box-shadow:
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  /* Accessibility improvements */
  .logo-item:focus-within {
    outline: 2px solid #581c87;
    outline-offset: 2px;
    border-radius: 0.75rem;
  }

  /* Reduced motion fallback */
  @media (prefers-reduced-motion: reduce) {
    .horizontal-logo-track {
      animation: none !important;
      transform: none !important;
    }
  }
</style>

<script>
  import { gsap } from "gsap";

  interface HorizontalScrollState {
    timeline: gsap.core.Timeline | null;
    isAnimating: boolean;
    scrollDirection: "left" | "right";
    scrollSpeed: number;
  }

  const scrollState: HorizontalScrollState = {
    timeline: null,
    isAnimating: false,
    scrollDirection: "left",
    scrollSpeed: 1,
  };

  function createHorizontalScrollAnimation(): gsap.core.Timeline {
    const track = document.querySelector(
      ".horizontal-logo-track"
    ) as HTMLElement;

    if (!track) {
      console.warn("Horizontal logo scroll track not found");
      return gsap.timeline();
    }

    // Get scroll direction and speed from data attributes
    const direction =
      (track.dataset.scrollDirection as "left" | "right") || "left";
    const speed = parseFloat(track.dataset.scrollSpeed || "1");

    scrollState.scrollDirection = direction;
    scrollState.scrollSpeed = speed;

    // Calculate the width of one set of logos for seamless looping
    const logoItems = track.children;
    const itemsPerSet = logoItems.length / 3; // We have 3 sets
    let setWidth = 0;

    for (let i = 0; i < itemsPerSet; i++) {
      const item = logoItems[i] as HTMLElement;
      setWidth += item.offsetWidth + 48; // 48px is gap-12 (3rem)
    }

    // Create timeline for infinite scroll
    const timeline = gsap.timeline({ repeat: -1, ease: "none" });

    // Animate based on direction
    const moveDistance = direction === "left" ? -setWidth : setWidth;
    const duration = 20 / speed; // Base duration adjusted by speed

    timeline.to(track, {
      x: moveDistance,
      duration: duration,
      ease: "none",
    });

    // Reset position for seamless loop
    timeline.set(track, { x: 0 });

    return timeline;
  }

  function initializeHorizontalScroll() {
    // Check for reduced motion preference
    const prefersReducedMotion = window.matchMedia(
      "(prefers-reduced-motion: reduce)"
    ).matches;

    if (prefersReducedMotion) {
      console.log(
        "Reduced motion detected, skipping horizontal scroll animation"
      );
      return;
    }

    // Clean up existing animation
    if (scrollState.timeline) {
      scrollState.timeline.kill();
    }

    // Wait for fonts and layout to be ready
    setTimeout(() => {
      // Create and start animation
      scrollState.timeline = createHorizontalScrollAnimation();
      scrollState.isAnimating = true;

      // Add pause/resume on hover for better UX
      const container = document.querySelector(
        ".horizontal-logo-scroll-container"
      ) as HTMLElement;
      if (container && scrollState.timeline) {
        container.addEventListener("mouseenter", () => {
          if (scrollState.timeline) {
            scrollState.timeline.pause();
          }
        });

        container.addEventListener("mouseleave", () => {
          if (scrollState.timeline) {
            scrollState.timeline.resume();
          }
        });
      }
    }, 100);
  }

  function handleResize() {
    // Reinitialize on resize to recalculate positions
    if (scrollState.isAnimating) {
      initializeHorizontalScroll();
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", initializeHorizontalScroll);

  // Handle resize events with debouncing
  let resizeTimeout: number;
  window.addEventListener("resize", () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(handleResize, 250);
  });

  // Handle visibility change to pause/resume animation
  document.addEventListener("visibilitychange", () => {
    if (scrollState.timeline) {
      if (document.hidden) {
        scrollState.timeline.pause();
      } else {
        scrollState.timeline.resume();
      }
    }
  });

  // Cleanup on page unload
  window.addEventListener("beforeunload", () => {
    if (scrollState.timeline) {
      scrollState.timeline.kill();
    }
  });
</script>
