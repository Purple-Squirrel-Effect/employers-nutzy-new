---
export interface Props {
  cards?: Array<{
    id: string;
    title: string;
    content?: string;
    image?: string;
  }>;
  className?: string;
}

const {
  cards = [
    {
      id: "card-1",
      title: "Professional Design",
      content: "Modern and clean interface",
    },
    {
      id: "card-2",
      title: "Smooth Animations",
      content: "Powered by GSAP technology",
    },
    {
      id: "card-3",
      title: "Responsive Layout",
      content: "Works on all screen sizes",
    },
    { id: "card-4", title: "Accessible", content: "Respects user preferences" },
  ],
  className = "",
} = Astro.props;
---

<!-- Single section with stacked card deck at center -->
<div class={`card-deck-section ${className}`} data-cards-container>
  <!-- Single sticky container that holds all cards stacked -->
  <div class="card-deck-center">
    {
      cards.map((card, index) => (
        <div
          class="card-item bg-white w-80 h-96 rounded-xl shadow-2xl overflow-hidden"
          data-card={card.id}
          data-index={index}
          style={`z-index: ${cards.length - index};`}
        >
          <div class="card-content p-8 h-full flex flex-col justify-center items-center text-center">
            {card.image ? (
              <img
                src={card.image}
                alt={card.title}
                class="w-full h-32 object-cover rounded-lg mb-4"
              />
            ) : (
              <div class="w-full h-32 bg-gradient-to-br from-purple-100 to-pink-100 rounded-lg mb-4 flex items-center justify-center">
                <div class="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full opacity-20" />
              </div>
            )}
            <h3 class="text-2xl font-semibold text-gray-800 mb-2">
              {card.title}
            </h3>
            {card.content && (
              <p class="text-gray-600 text-lg leading-relaxed">
                {card.content}
              </p>
            )}
          </div>
        </div>
      ))
    }
  </div>
</div>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  // Register ScrollTrigger plugin
  gsap.registerPlugin(ScrollTrigger);

  // Check for reduced motion preference
  const prefersReducedMotion = window.matchMedia(
    "(prefers-reduced-motion: reduce)"
  ).matches;

  function initializeCardAnimations() {
    const container = document.querySelector(".card-deck-section");
    const cardItems = document.querySelectorAll(".card-item");

    if (!container || cardItems.length === 0) return;

    // Initialize all cards stacked with subtle depth effect
    cardItems.forEach((card, index) => {
      gsap.set(card, {
        y: index * -2,
        x: index * 1,
        rotation: (index - cardItems.length / 2) * 0.5,
        scale: 1 - index * 0.02,
        opacity: 1,
      });
    });

    // Create sequential scroll-triggered animations for each card
    cardItems.forEach((card, index) => {
      // Calculate scroll positions - each card gets 100vh of scroll space
      const startProgress = index * 100; // Start at index * 100vh
      const endProgress = (index + 1) * 100; // End at (index + 1) * 100vh

      let tl = gsap.timeline({
        scrollTrigger: {
          trigger: container,
          start: `top+=${startProgress}vh bottom`,
          end: `top+=${endProgress}vh bottom`,
          scrub: 1,
        },
      });

      if (prefersReducedMotion) {
        // Simple fade for reduced motion
        tl.to(card, {
          opacity: 0,
          scale: 0.8,
        });
      } else {
        // Card swipe animation - alternate directions
        const swipeDirection = index % 2 === 0 ? 1 : -1;
        tl.to(card, {
          x: 400 * swipeDirection,
          y: -100,
          rotation: 25 * swipeDirection,
          opacity: 0,
          scale: 0.8,
          ease: "power2.out",
        });
      }
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeCardAnimations);
  } else {
    initializeCardAnimations();
  }

  // Re-initialize on navigation (for SPA-like behavior)
  document.addEventListener("astro:page-load", initializeCardAnimations);

  // Handle resize events
  window.addEventListener("resize", () => {
    // Debounce resize events
    clearTimeout((window as any).resizeTimeout);
    (window as any).resizeTimeout = setTimeout(initializeCardAnimations, 250);
  });
</script>

<style>
  .card-deck-section {
    /* Section height allows for scroll-triggered animations */
    height: 400vh; /* Enough height for all card animations */
    position: relative;
  }

  .card-deck-center {
    /* Sticky positioning keeps deck centered in viewport */
    position: sticky;
    top: 47.5vh;
    width: 320px;
    height: 384px;
    margin-left: auto;
    margin-right: auto;
    transform: translateY(-50%);
  }

  .card-item {
    /* All cards stacked absolutely in the same position */
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    backface-visibility: hidden;
    transition: box-shadow 0.3s ease;
  }

  .card-item:hover {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  .card-content {
    will-change: transform;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .card-item {
      width: 280px;
      height: 350px;
    }
  }
</style>
