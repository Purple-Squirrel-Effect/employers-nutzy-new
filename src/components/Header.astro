---
// Header component with dynamic navigation and active link handling
// Uses shared navigation configuration for consistency across the site

import { mainNavigationLinks, isActiveLink } from "../config/navigation";

// Get current URL for active link detection
const currentPath = Astro.url.pathname;
---

<header
  class="fixed px-4 md:px-8 lg:px-32 z-[60] backdrop-blur-md bg-primary-200/70 w-full text-white"
>
  <!-- Desktop Navigation -->
  <nav
    class="lg:flex mr-4 p-2 hidden items-center"
    aria-label="Main navigation"
  >
    <!-- Logo -->
    <div class="flex-shrink-0">
      <a
        href="/"
        class="flex items-center gap-3 group mr-4 z-50 relative"
        aria-label="Nutzy Home"
      >
        <svg
          class="h-10 md:h-12"
          viewBox="0 0 1123 467"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M118.254 5.79363C119.081 1.9619 114.034 -0.686125 110.585 1.75849C78.8248 24.2918 -9.2276 96.6549 1.06379 199.325C5.8968 247.518 30.5136 283.589 47.8802 304.021C50.1803 306.728 54.9756 306.045 56.2049 302.843C67.2777 273.972 77.6534 240.108 84.7563 201.797C88.5059 181.558 90.9193 162.364 92.3651 144.43C92.701 140.241 99.0138 139.033 101.295 142.719L115.001 164.857C116.063 166.572 118.311 167.414 120.445 166.892C131.904 164.096 147.253 161.477 165.452 161.391C185.485 161.299 202.222 164.308 214.338 167.409C216.511 167.964 218.817 167.109 219.878 165.347L233.397 142.897C235.584 139.266 241.754 140.273 242.334 144.354C247.001 177.151 253.733 212.722 263.347 250.483C272.378 285.954 282.764 318.672 293.634 348.45C294.883 351.875 300.098 352.428 302.237 349.364C316.551 328.844 342.31 283.503 331.821 228.504C321.218 172.89 279.223 137.128 266.332 126.962C205.181 78.7387 141.06 87.7452 121.461 44.6771C115.284 31.1049 115.773 17.2876 118.254 5.79363Z"
            fill="#581c87"></path>
          <path
            d="M105.498 358.251C104.59 356.889 96.1274 343.709 102.126 330.457C102.811 328.942 105.758 322.848 112.689 318.86C121.293 313.906 130.452 315.415 148.417 318.639C154.814 319.787 161.995 321.394 169.765 323.674C169.667 320.537 169.649 316.257 169.992 311.201C170.884 297.937 171.329 291.305 175.158 288.658C177.644 286.943 186.062 289.534 202.798 294.787C213.849 298.255 219.401 300.06 220.77 303.423C222.334 307.264 220.188 311.473 215.833 319.735C212.058 326.893 208.069 332.39 205.046 336.146C222.911 341.06 234.624 348.826 241.298 354.125C250.049 361.073 252.037 365.292 252.909 368.099C255.687 377.028 252.426 388.566 245.495 394.796C227.228 411.22 188.208 386.527 179.877 398.518C175.192 405.26 183.68 418.631 187.968 423.901C196.273 434.113 207.407 436.803 210.663 437.471C202.881 444.685 195.498 449.531 190.013 452.674C190.013 452.674 176.05 460.674 147.519 465.92C145.762 466.241 142.315 466.823 138.53 465.48C134.946 464.212 132.749 461.82 131.565 460.449C127.058 455.241 117.889 442.562 106.621 425.215C109.037 425.261 136.191 425.538 139.429 414.711C139.777 413.545 139.758 412.559 139.728 412.102C139.237 404.393 127.107 401.57 114.035 392.609C110.337 390.075 105.168 386.09 99.6543 380.135C101.601 372.84 103.549 365.545 105.498 358.251Z"
            fill="#25b4b3"></path>
          <path
            d="M128.118 231.397C128.118 238.689 124.73 244.599 120.552 244.599C116.374 244.599 112.988 238.689 112.988 231.397C112.988 224.105 116.374 218.194 120.552 218.194C124.73 218.194 128.118 224.105 128.118 231.397Z"
            fill="#581c87"></path>
          <path
            d="M221.973 230.521C221.973 237.813 218.587 243.723 214.407 243.723C210.231 243.723 206.844 237.813 206.844 230.521C206.844 223.229 210.231 217.318 214.407 217.318C218.587 217.318 221.973 223.229 221.973 230.521Z"
            fill="#581c87"></path>
          <path
            d="M187.176 254.551C187.176 248.573 178.254 243.724 167.252 243.724C156.247 243.724 147.326 248.573 147.326 254.551C147.326 260.166 155.188 264.781 165.257 265.323V273.763C165.257 274.976 166.274 275.967 167.52 275.967C168.763 275.967 169.783 274.976 169.783 273.763V265.283C179.589 264.605 187.176 260.065 187.176 254.551Z"
            fill="#581c87"></path>
          <path
            d="M545.699 242.829L546.107 155.343H578.365L578.161 239.846C577.957 263.708 588.371 274.842 606.949 274.842C625.529 274.842 635.533 263.708 635.533 239.846L635.737 155.343H668.201L667.997 242.829C667.997 283.788 643.088 305.263 607.153 305.263C571.017 305.263 545.699 283.788 545.699 242.829Z"
            fill="#581c87"></path>
          <path
            d="M731.291 183.776H689.232V155.344H805.812V183.776H763.753V302.281H731.291V183.776Z"
            fill="#581c87"></path>
          <path
            d="M927.705 159.718L869.719 273.849H927.295V302.281H821.129V297.905L879.316 183.777H819.494L826.641 155.344H927.705V159.718Z"
            fill="#581c87"></path>
          <path
            d="M1077.97 155.344L1022.03 247.204V302.281H989.772V248.398L933.627 155.344H972.623L1006.31 216.383L1040 155.344H1077.97Z"
            fill="#581c87"></path>
          <path
            d="M1082.53 279.312C1082.38 278.877 1081 274.689 1083.59 271.46C1083.89 271.094 1085.13 269.62 1087.32 268.995C1090.03 268.219 1092.43 269.253 1097.13 271.357C1098.8 272.103 1100.66 273.03 1102.63 274.182C1102.82 273.314 1103.12 272.139 1103.58 270.775C1104.77 267.199 1105.37 265.409 1106.61 264.945C1107.41 264.643 1109.53 265.924 1113.75 268.497C1116.53 270.197 1117.92 271.067 1118.06 272.08C1118.22 273.24 1117.32 274.25 1115.54 276.221C1113.99 277.929 1112.51 279.164 1111.41 279.99C1115.96 282.548 1118.62 285.47 1120.07 287.375C1121.47 289.216 1122.11 290.503 1122.25 291.995C1122.3 292.454 1122.66 296.151 1120 297.726C1118.2 298.789 1116.16 298.212 1115.68 298.066C1115.08 299.059 1114.37 300.101 1113.53 301.156C1110.95 304.42 1108.08 306.658 1105.72 308.156C1104.64 308.746 1103.4 309.348 1101.99 309.901C1100.86 310.351 1099.83 310.682 1098.97 310.926C1098.97 310.926 1094.57 312.174 1086.37 311.682C1085.86 311.653 1084.88 311.576 1083.94 310.954C1083.04 310.363 1082.61 309.559 1082.38 309.102C1081.52 307.368 1079.91 303.269 1078.06 297.75C1077.72 296.276 1077.39 294.142 1077.6 291.581C1077.85 288.673 1078.69 286.384 1079.37 284.917C1080.42 283.048 1081.48 281.181 1082.53 279.312Z"
            fill="#25b4b3"></path>
          <path
            d="M516.3 155.344V304.665H511.808L428.508 221.753V302.279H396.045V152.759H400.741L483.633 235.473V155.344H516.3Z"
            fill="#581c87"></path>
        </svg>
      </a>
    </div>

    <!-- Navigation Links -->
    <div class="ml-auto flex items-center space-x-2">
      {
        mainNavigationLinks.map((link) => {
          const isActive = isActiveLink(link.href, currentPath);
          return (
            <a
              href={link.href}
              class={`text-sm relative font-medium transition-colors mx-2 rounded-xs duration-200 hover:text-primary-500 ${
                isActive ? "text-primary-900     " : "text-gray-700"
              }`}
              target={link.external ? "_blank" : undefined}
              rel={link.external ? "noopener noreferrer" : undefined}
              aria-current={isActive ? "page" : undefined}
            >
              {link.label}
              {isActive && (
                <div class="absolute bottom-0 w-full bg-primary-900 h-0.5" />
              )}
            </a>
          );
        })
      }
    </div>
  </nav>

  <!-- Mobile Navigation -->
  <nav
    class="flex p-4 lg:hidden items-center justify-between"
    aria-label="Mobile navigation"
  >
    <!-- Logo -->
    <div class="flex-shrink-0">
      <a
        href="/"
        class="flex items-center gap-3 group mr-4 z-50 relative"
        aria-label="Nutzy Home"
      >
        <svg
          class="h-10 md:h-12"
          viewBox="0 0 1123 467"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M118.254 5.79363C119.081 1.9619 114.034 -0.686125 110.585 1.75849C78.8248 24.2918 -9.2276 96.6549 1.06379 199.325C5.8968 247.518 30.5136 283.589 47.8802 304.021C50.1803 306.728 54.9756 306.045 56.2049 302.843C67.2777 273.972 77.6534 240.108 84.7563 201.797C88.5059 181.558 90.9193 162.364 92.3651 144.43C92.701 140.241 99.0138 139.033 101.295 142.719L115.001 164.857C116.063 166.572 118.311 167.414 120.445 166.892C131.904 164.096 147.253 161.477 165.452 161.391C185.485 161.299 202.222 164.308 214.338 167.409C216.511 167.964 218.817 167.109 219.878 165.347L233.397 142.897C235.584 139.266 241.754 140.273 242.334 144.354C247.001 177.151 253.733 212.722 263.347 250.483C272.378 285.954 282.764 318.672 293.634 348.45C294.883 351.875 300.098 352.428 302.237 349.364C316.551 328.844 342.31 283.503 331.821 228.504C321.218 172.89 279.223 137.128 266.332 126.962C205.181 78.7387 141.06 87.7452 121.461 44.6771C115.284 31.1049 115.773 17.2876 118.254 5.79363Z"
            fill="#581c87"></path>
          <path
            d="M105.498 358.251C104.59 356.889 96.1274 343.709 102.126 330.457C102.811 328.942 105.758 322.848 112.689 318.86C121.293 313.906 130.452 315.415 148.417 318.639C154.814 319.787 161.995 321.394 169.765 323.674C169.667 320.537 169.649 316.257 169.992 311.201C170.884 297.937 171.329 291.305 175.158 288.658C177.644 286.943 186.062 289.534 202.798 294.787C213.849 298.255 219.401 300.06 220.77 303.423C222.334 307.264 220.188 311.473 215.833 319.735C212.058 326.893 208.069 332.39 205.046 336.146C222.911 341.06 234.624 348.826 241.298 354.125C250.049 361.073 252.037 365.292 252.909 368.099C255.687 377.028 252.426 388.566 245.495 394.796C227.228 411.22 188.208 386.527 179.877 398.518C175.192 405.26 183.68 418.631 187.968 423.901C196.273 434.113 207.407 436.803 210.663 437.471C202.881 444.685 195.498 449.531 190.013 452.674C190.013 452.674 176.05 460.674 147.519 465.92C145.762 466.241 142.315 466.823 138.53 465.48C134.946 464.212 132.749 461.82 131.565 460.449C127.058 455.241 117.889 442.562 106.621 425.215C109.037 425.261 136.191 425.538 139.429 414.711C139.777 413.545 139.758 412.559 139.728 412.102C139.237 404.393 127.107 401.57 114.035 392.609C110.337 390.075 105.168 386.09 99.6543 380.135C101.601 372.84 103.549 365.545 105.498 358.251Z"
            fill="#25b4b3"></path>
          <path
            d="M128.118 231.397C128.118 238.689 124.73 244.599 120.552 244.599C116.374 244.599 112.988 238.689 112.988 231.397C112.988 224.105 116.374 218.194 120.552 218.194C124.73 218.194 128.118 224.105 128.118 231.397Z"
            fill="#581c87"></path>
          <path
            d="M221.973 230.521C221.973 237.813 218.587 243.723 214.407 243.723C210.231 243.723 206.844 237.813 206.844 230.521C206.844 223.229 210.231 217.318 214.407 217.318C218.587 217.318 221.973 223.229 221.973 230.521Z"
            fill="#581c87"></path>
          <path
            d="M187.176 254.551C187.176 248.573 178.254 243.724 167.252 243.724C156.247 243.724 147.326 248.573 147.326 254.551C147.326 260.166 155.188 264.781 165.257 265.323V273.763C165.257 274.976 166.274 275.967 167.52 275.967C168.763 275.967 169.783 274.976 169.783 273.763V265.283C179.589 264.605 187.176 260.065 187.176 254.551Z"
            fill="#581c87"></path>
          <path
            d="M545.699 242.829L546.107 155.343H578.365L578.161 239.846C577.957 263.708 588.371 274.842 606.949 274.842C625.529 274.842 635.533 263.708 635.533 239.846L635.737 155.343H668.201L667.997 242.829C667.997 283.788 643.088 305.263 607.153 305.263C571.017 305.263 545.699 283.788 545.699 242.829Z"
            fill="#581c87"></path>
          <path
            d="M731.291 183.776H689.232V155.344H805.812V183.776H763.753V302.281H731.291V183.776Z"
            fill="#581c87"></path>
          <path
            d="M927.705 159.718L869.719 273.849H927.295V302.281H821.129V297.905L879.316 183.777H819.494L826.641 155.344H927.705V159.718Z"
            fill="#581c87"></path>
          <path
            d="M1077.97 155.344L1022.03 247.204V302.281H989.772V248.398L933.627 155.344H972.623L1006.31 216.383L1040 155.344H1077.97Z"
            fill="#581c87"></path>
          <path
            d="M1082.53 279.312C1082.38 278.877 1081 274.689 1083.59 271.46C1083.89 271.094 1085.13 269.62 1087.32 268.995C1090.03 268.219 1092.43 269.253 1097.13 271.357C1098.8 272.103 1100.66 273.03 1102.63 274.182C1102.82 273.314 1103.12 272.139 1103.58 270.775C1104.77 267.199 1105.37 265.409 1106.61 264.945C1107.41 264.643 1109.53 265.924 1113.75 268.497C1116.53 270.197 1117.92 271.067 1118.06 272.08C1118.22 273.24 1117.32 274.25 1115.54 276.221C1113.99 277.929 1112.51 279.164 1111.41 279.99C1115.96 282.548 1118.62 285.47 1120.07 287.375C1121.47 289.216 1122.11 290.503 1122.25 291.995C1122.3 292.454 1122.66 296.151 1120 297.726C1118.2 298.789 1116.16 298.212 1115.68 298.066C1115.08 299.059 1114.37 300.101 1113.53 301.156C1110.95 304.42 1108.08 306.658 1105.72 308.156C1104.64 308.746 1103.4 309.348 1101.99 309.901C1100.86 310.351 1099.83 310.682 1098.97 310.926C1098.97 310.926 1094.57 312.174 1086.37 311.682C1085.86 311.653 1084.88 311.576 1083.94 310.954C1083.04 310.363 1082.61 309.559 1082.38 309.102C1081.52 307.368 1079.91 303.269 1078.06 297.75C1077.72 296.276 1077.39 294.142 1077.6 291.581C1077.85 288.673 1078.69 286.384 1079.37 284.917C1080.42 283.048 1081.48 281.181 1082.53 279.312Z"
            fill="#25b4b3"></path>
          <path
            d="M516.3 155.344V304.665H511.808L428.508 221.753V302.279H396.045V152.759H400.741L483.633 235.473V155.344H516.3Z"
            fill="#581c87"></path>
        </svg>
      </a>
    </div>

    <!-- Mobile Menu Button -->
    <button
      id="mobile-nav-button"
      class="p-2 text-gray-700 hover:text-primary-600 transition-colors duration-200 relative"
      aria-label="Toggle mobile menu"
      aria-expanded="false"
      aria-controls="mobile-nav-menu"
    >
      <!-- Hamburger/Cross Icon Container -->
      <div class="w-6 h-6 relative">
        <!-- Hamburger Icon -->
        <svg
          id="hamburger-icon"
          class="w-6 h-6 absolute inset-0 transition-all duration-300 ease-in-out"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>

        <!-- Cross Icon -->
        <svg
          id="cross-icon"
          class="w-6 h-6 absolute inset-0 transition-all duration-300 ease-in-out opacity-0 rotate-45 scale-90"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </div>
    </button>

    <!-- Mobile Menu -->
    <div
      id="mobile-nav-menu"
      class="fixed top-16 left-0 w-full h-screen bg-white transform -translate-x-full transition-transform duration-300 ease-in-out z-50"
      aria-hidden="true"
    >
      <nav class="p-6" aria-label="Mobile menu">
        <ul class="space-y-4">
          {
            mainNavigationLinks.map((link) => {
              const isActive = isActiveLink(link.href, currentPath);
              return (
                <li>
                  <a
                    href={link.href}
                    class={`block text-lg font-medium py-2 transition-colors duration-200 hover:text-primary-600 ${
                      isActive
                        ? "text-primary-600 border-l-4 border-primary-600 pl-4"
                        : "text-gray-700"
                    }`}
                    target={link.external ? "_blank" : undefined}
                    rel={link.external ? "noopener noreferrer" : undefined}
                    aria-current={isActive ? "page" : undefined}
                  >
                    {link.label}
                  </a>
                </li>
              );
            })
          }
        </ul>
      </nav>
    </div>
  </nav>
</header>

<script>
  // Mobile navigation functionality
  const mobileMenu = document.getElementById("mobile-nav-menu");
  const mobileButton = document.getElementById("mobile-nav-button");
  const hamburgerIcon = document.getElementById("hamburger-icon");
  const crossIcon = document.getElementById("cross-icon");

  // Track menu state
  let isMenuOpen = false;

  // Toggle mobile menu
  function toggleMobileMenu() {
    isMenuOpen = !isMenuOpen;

    if (mobileMenu && mobileButton && hamburgerIcon && crossIcon) {
      if (isMenuOpen) {
        // Open menu
        mobileMenu.classList.remove("-translate-x-full");
        mobileMenu.classList.add("translate-x-0");
        mobileMenu.setAttribute("aria-hidden", "false");
        mobileButton.setAttribute("aria-expanded", "true");

        // Animate icons: hide hamburger, show cross
        hamburgerIcon.classList.add("opacity-0", "rotate-45", "scale-90");
        crossIcon.classList.remove("opacity-0", "rotate-45", "scale-90");
        crossIcon.classList.add("opacity-100", "rotate-0", "scale-100");

        // Update aria-label
        mobileButton.setAttribute("aria-label", "Close mobile menu");

        // Prevent body scroll when menu is open
        document.body.style.overflow = "hidden";
      } else {
        // Close menu
        mobileMenu.classList.add("-translate-x-full");
        mobileMenu.classList.remove("translate-x-0");
        mobileMenu.setAttribute("aria-hidden", "true");
        mobileButton.setAttribute("aria-expanded", "false");

        // Animate icons: show hamburger, hide cross
        hamburgerIcon.classList.remove("opacity-0", "rotate-45", "scale-90");
        crossIcon.classList.add("opacity-0", "rotate-45", "scale-90");
        crossIcon.classList.remove("opacity-100", "rotate-0", "scale-100");

        // Update aria-label
        mobileButton.setAttribute("aria-label", "Toggle mobile menu");

        // Restore body scroll
        document.body.style.overflow = "";
      }
    }
  }

  // Close menu when clicking outside
  function handleOutsideClick(event: Event) {
    if (
      isMenuOpen &&
      mobileMenu &&
      !mobileMenu.contains(event.target as Node) &&
      !mobileButton?.contains(event.target as Node)
    ) {
      toggleMobileMenu();
    }
  }

  // Close menu on escape key
  function handleEscapeKey(event: KeyboardEvent) {
    if (event.key === "Escape" && isMenuOpen) {
      toggleMobileMenu();
    }
  }

  // Close menu when clicking on a link (for better UX)
  function handleLinkClick() {
    if (isMenuOpen) {
      toggleMobileMenu();
    }
  }

  // Event listeners
  mobileButton?.addEventListener("click", toggleMobileMenu);
  document.addEventListener("click", handleOutsideClick);
  document.addEventListener("keydown", handleEscapeKey);

  // Add click listeners to mobile menu links
  const mobileLinks = mobileMenu?.querySelectorAll("a");
  mobileLinks?.forEach((link) => {
    link.addEventListener("click", handleLinkClick);
  });

  // Clean up on page unload
  window.addEventListener("beforeunload", () => {
    document.body.style.overflow = "";
  });

  // GSAP Header Hide/Show on Scroll
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  // Register GSAP plugins
  gsap.registerPlugin(ScrollTrigger);

  // Header scroll behavior state
  interface HeaderScrollState {
    lastScrollY: number;
    isHeaderVisible: boolean;
    scrollThreshold: number;
    headerHeight: number;
    tween: gsap.core.Tween | null;
  }

  const headerState: HeaderScrollState = {
    lastScrollY: 0,
    isHeaderVisible: true,
    scrollThreshold: 10, // Minimum scroll distance to trigger hide/show
    headerHeight: 0,
    tween: null,
  };

  function initHeaderScrollBehavior() {
    // Check for reduced motion preference
    const prefersReducedMotion = window.matchMedia(
      "(prefers-reduced-motion: reduce)"
    ).matches;

    if (prefersReducedMotion) {
      console.log("Reduced motion detected, skipping header scroll animation");
      return;
    }

    const header = document.querySelector("header") as HTMLElement;
    if (!header) {
      console.warn("Header element not found");
      return;
    }

    // Get header height for animation calculations
    headerState.headerHeight = header.offsetHeight;

    // Set initial header position with GSAP for better control
    gsap.set(header, { y: 0 });

    // Create scroll-triggered behavior
    ScrollTrigger.create({
      trigger: "body",
      start: "top top",
      end: "bottom bottom",
      onUpdate: (self) => {
        const currentScrollY = self.scroll();
        const scrollDirection =
          currentScrollY > headerState.lastScrollY ? "down" : "up";
        const scrollDelta = Math.abs(currentScrollY - headerState.lastScrollY);

        // Only trigger animation if scroll delta exceeds threshold
        if (scrollDelta > headerState.scrollThreshold) {
          if (
            scrollDirection === "down" &&
            currentScrollY > headerState.headerHeight
          ) {
            // Scrolling down - hide header
            hideHeader(header);
          } else if (
            scrollDirection === "up" ||
            currentScrollY <= headerState.headerHeight
          ) {
            // Scrolling up or at top - show header
            showHeader(header);
          }
        }

        headerState.lastScrollY = currentScrollY;
      },
    });
  }

  function hideHeader(header: HTMLElement) {
    if (!headerState.isHeaderVisible) return;

    headerState.isHeaderVisible = false;

    // Kill any existing tween
    if (headerState.tween) {
      headerState.tween.kill();
    }

    // Animate header up and out of view
    headerState.tween = gsap.to(header, {
      y: -headerState.headerHeight,
      duration: 0.3,
      ease: "power2.out",
    });
  }

  function showHeader(header: HTMLElement) {
    if (headerState.isHeaderVisible) return;

    headerState.isHeaderVisible = true;

    // Kill any existing tween
    if (headerState.tween) {
      headerState.tween.kill();
    }

    // Animate header back into view
    headerState.tween = gsap.to(header, {
      y: 0,
      duration: 0.3,
      ease: "power2.out",
    });
  }

  // Initialize header scroll behavior when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initHeaderScrollBehavior);
  } else {
    initHeaderScrollBehavior();
  }

  // Handle window resize to recalculate header height
  window.addEventListener("resize", () => {
    const header = document.querySelector("header") as HTMLElement;
    if (header) {
      headerState.headerHeight = header.offsetHeight;
    }
  });
</script>
