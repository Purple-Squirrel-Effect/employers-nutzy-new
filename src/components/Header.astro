---
export interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<header class={`header-component ${className}`} data-header>
  <nav
    class="fixed top-0 left-0 right-0 z-50 bg-white/95 backdrop-blur-md border-b border-purple-100 transition-all duration-300"
    data-nav
  >
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between h-16 lg:h-20">
        <!-- Logo -->
        <div class="flex-shrink-0">
          <a href="/" class="flex items-center gap-3 group">
            <div
              class="w-10 h-10 bg-gradient-to-br from-purple-600 to-pink-600 rounded-xl flex items-center justify-center transition-transform duration-300 group-hover:scale-110"
            >
              <span class="text-white font-bold text-xl">N</span>
            </div>
            <span class="text-2xl font-bold text-purple-900 hidden sm:block"
              >Nutzy</span
            >
          </a>
        </div>

        <!-- Desktop Navigation -->
        <div class="hidden lg:flex items-center space-x-8">
          <a
            href="/#about"
            class="nav-link text-purple-700 hover:text-purple-900 font-medium transition-colors duration-300"
          >
            Over Ons
          </a>
          <a
            href="/#services"
            class="nav-link text-purple-700 hover:text-purple-900 font-medium transition-colors duration-300"
          >
            Services
          </a>
          <a
            href="/pricing"
            class="nav-link text-purple-700 hover:text-purple-900 font-medium transition-colors duration-300"
          >
            Prijzen
          </a>
          <a
            href="/#testimonials"
            class="nav-link text-purple-700 hover:text-purple-900 font-medium transition-colors duration-300"
          >
            Testimonials
          </a>
          <a
            href="/#faq"
            class="nav-link text-purple-700 hover:text-purple-900 font-medium transition-colors duration-300"
          >
            FAQ
          </a>
          <a
            href="/#contact"
            class="nav-link text-purple-700 hover:text-purple-900 font-medium transition-colors duration-300"
          >
            Contact
          </a>
        </div>

        <!-- CTA Button -->
        <div class="hidden lg:flex items-center space-x-4">
          <a
            href="/#quickscan"
            class="text-purple-700 hover:text-purple-900 font-medium transition-colors duration-300"
          >
            Quickscan
          </a>
          <a
            href="/#contact"
            class="group relative overflow-hidden rounded-xl bg-gradient-to-r from-purple-600 via-pink-600 to-purple-800 px-6 py-3 text-white font-semibold shadow-lg transition-all duration-300 hover:scale-105 hover:shadow-purple-500/25 focus:outline-none focus:ring-4 focus:ring-purple-500/50"
          >
            <span class="relative z-10 flex items-center gap-2">
              Demo Aanvragen
              <svg
                class="h-4 w-4 transition-transform duration-300 group-hover:translate-x-1"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
              </svg>
            </span>
            <div
              class="absolute inset-0 bg-gradient-to-r from-purple-700 via-pink-700 to-purple-900 opacity-0 transition-opacity duration-300 group-hover:opacity-100"
            >
            </div>
          </a>
        </div>

        <!-- Mobile Menu Button -->
        <div class="lg:hidden">
          <button
            type="button"
            class="mobile-menu-btn p-2 rounded-lg text-purple-700 hover:text-purple-900 hover:bg-purple-50 transition-colors duration-300"
            data-mobile-menu-btn
            aria-label="Open menu"
          >
            <svg
              class="h-6 w-6"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              data-menu-icon
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
            <svg
              class="h-6 w-6 hidden"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              data-close-icon
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>

    <!-- Mobile Menu -->
    <div class="mobile-menu lg:hidden hidden" data-mobile-menu>
      <div class="px-4 pt-2 pb-6 space-y-1 bg-white border-t border-purple-100">
        <a
          href="/#about"
          class="mobile-nav-link block px-3 py-3 text-purple-700 hover:text-purple-900 hover:bg-purple-50 rounded-lg font-medium transition-colors duration-300"
        >
          Over Ons
        </a>
        <a
          href="/#services"
          class="mobile-nav-link block px-3 py-3 text-purple-700 hover:text-purple-900 hover:bg-purple-50 rounded-lg font-medium transition-colors duration-300"
        >
          Services
        </a>
        <a
          href="/pricing"
          class="mobile-nav-link block px-3 py-3 text-purple-700 hover:text-purple-900 hover:bg-purple-50 rounded-lg font-medium transition-colors duration-300"
        >
          Prijzen
        </a>
        <a
          href="/#testimonials"
          class="mobile-nav-link block px-3 py-3 text-purple-700 hover:text-purple-900 hover:bg-purple-50 rounded-lg font-medium transition-colors duration-300"
        >
          Testimonials
        </a>
        <a
          href="/#faq"
          class="mobile-nav-link block px-3 py-3 text-purple-700 hover:text-purple-900 hover:bg-purple-50 rounded-lg font-medium transition-colors duration-300"
        >
          FAQ
        </a>
        <a
          href="/#quickscan"
          class="mobile-nav-link block px-3 py-3 text-purple-700 hover:text-purple-900 hover:bg-purple-50 rounded-lg font-medium transition-colors duration-300"
        >
          Quickscan
        </a>
        <a
          href="/#contact"
          class="mobile-nav-link block px-3 py-3 text-purple-700 hover:text-purple-900 hover:bg-purple-50 rounded-lg font-medium transition-colors duration-300"
        >
          Contact
        </a>
        <div class="pt-4">
          <a
            href="/#contact"
            class="block w-full text-center bg-gradient-to-r from-purple-600 via-pink-600 to-purple-800 px-6 py-3 text-white font-semibold rounded-xl shadow-lg transition-all duration-300 hover:scale-105"
          >
            Demo Aanvragen
          </a>
        </div>
      </div>
    </div>
  </nav>
</header>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  class HeaderController {
    private header: HTMLElement;
    private nav: HTMLElement;
    private mobileMenuBtn: HTMLButtonElement;
    private mobileMenu: HTMLElement;
    private menuIcon: SVGElement;
    private closeIcon: SVGElement;
    private isMenuOpen: boolean = false;

    constructor() {
      this.header = document.querySelector("[data-header]") as HTMLElement;
      this.nav = document.querySelector("[data-nav]") as HTMLElement;
      this.mobileMenuBtn = document.querySelector(
        "[data-mobile-menu-btn]"
      ) as HTMLButtonElement;
      this.mobileMenu = document.querySelector(
        "[data-mobile-menu]"
      ) as HTMLElement;
      this.menuIcon = document.querySelector("[data-menu-icon]") as SVGElement;
      this.closeIcon = document.querySelector(
        "[data-close-icon]"
      ) as SVGElement;

      if (this.header && this.nav) {
        this.init();
      }
    }

    private init(): void {
      this.initScrollBehavior();
      this.initMobileMenu();
      this.initSmoothScrolling();
    }

    private initScrollBehavior(): void {
      let lastScrollY = window.scrollY;

      ScrollTrigger.create({
        start: "top top",
        end: "max",
        onUpdate: (self) => {
          const currentScrollY = window.scrollY;

          if (currentScrollY > 100) {
            // Add shadow and adjust background when scrolled
            this.nav.classList.add("shadow-lg", "bg-white/98");
            this.nav.classList.remove("bg-white/95");
          } else {
            // Remove shadow and adjust background when at top
            this.nav.classList.remove("shadow-lg", "bg-white/98");
            this.nav.classList.add("bg-white/95");
          }

          // Hide/show header based on scroll direction
          if (currentScrollY > lastScrollY && currentScrollY > 200) {
            // Scrolling down - hide header
            gsap.to(this.nav, { y: -100, duration: 0.3, ease: "power2.out" });
          } else {
            // Scrolling up - show header
            gsap.to(this.nav, { y: 0, duration: 0.3, ease: "power2.out" });
          }

          lastScrollY = currentScrollY;
        },
      });
    }

    private initMobileMenu(): void {
      if (!this.mobileMenuBtn || !this.mobileMenu) return;

      this.mobileMenuBtn.addEventListener("click", () => {
        this.toggleMobileMenu();
      });

      // Close menu when clicking on nav links
      const mobileNavLinks =
        this.mobileMenu.querySelectorAll(".mobile-nav-link");
      mobileNavLinks.forEach((link) => {
        link.addEventListener("click", () => {
          this.closeMobileMenu();
        });
      });

      // Close menu when clicking outside
      document.addEventListener("click", (e) => {
        if (this.isMenuOpen && !this.header.contains(e.target as Node)) {
          this.closeMobileMenu();
        }
      });

      // Close menu on escape key
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && this.isMenuOpen) {
          this.closeMobileMenu();
        }
      });
    }

    private toggleMobileMenu(): void {
      if (this.isMenuOpen) {
        this.closeMobileMenu();
      } else {
        this.openMobileMenu();
      }
    }

    private openMobileMenu(): void {
      this.isMenuOpen = true;
      this.mobileMenu.classList.remove("hidden");
      this.menuIcon.classList.add("hidden");
      this.closeIcon.classList.remove("hidden");

      // Animate menu appearance
      gsap.fromTo(
        this.mobileMenu,
        { opacity: 0, y: -20 },
        { opacity: 1, y: 0, duration: 0.3, ease: "power2.out" }
      );

      // Prevent body scroll
      document.body.style.overflow = "hidden";
    }

    private closeMobileMenu(): void {
      this.isMenuOpen = false;

      gsap.to(this.mobileMenu, {
        opacity: 0,
        y: -20,
        duration: 0.2,
        ease: "power2.in",
        onComplete: () => {
          this.mobileMenu.classList.add("hidden");
          this.menuIcon.classList.remove("hidden");
          this.closeIcon.classList.add("hidden");
        },
      });

      // Restore body scroll
      document.body.style.overflow = "";
    }

    private initSmoothScrolling(): void {
      // Smooth scroll for anchor links
      const anchorLinks = this.header.querySelectorAll('a[href^="#"]');
      anchorLinks.forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          const href = link.getAttribute("href");
          if (href && href !== "#") {
            const targetId = href.substring(1);
            const targetElement = document.getElementById(targetId);
            if (targetElement) {
              const headerHeight = this.nav.offsetHeight;
              const targetPosition =
                targetElement.offsetTop - headerHeight - 20;

              window.scrollTo({
                top: targetPosition,
                behavior: "smooth",
              });
            }
          }
        });
      });
    }
  }

  // Initialize header when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new HeaderController();
  });
</script>

<style>
  .nav-link {
    position: relative;
  }

  .nav-link::after {
    content: "";
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 0;
    height: 2px;
    background: linear-gradient(to right, #9333ea, #ec4899);
    transition: width 0.3s ease;
  }

  .nav-link:hover::after {
    width: 100%;
  }

  /* Header positioning styles - content spacing handled by individual sections */
</style>
