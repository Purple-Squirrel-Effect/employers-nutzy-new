---
// Contact form data structure
interface FormField {
  id: string;
  name: string;
  type: 'text' | 'email' | 'tel' | 'textarea' | 'select';
  label: string;
  placeholder: string;
  required: boolean;
  options?: { value: string; label: string; }[];
  validation?: {
    pattern?: string;
    minLength?: number;
    maxLength?: number;
  };
}

// Form fields configuration
const formFields: FormField[] = [
  {
    id: "name",
    name: "name",
    type: "text",
    label: "Jouw naam",
    placeholder: "Voer je volledige naam in",
    required: true,
    validation: {
      minLength: 2,
      maxLength: 100
    }
  },
  {
    id: "email",
    name: "email", 
    type: "email",
    label: "E-mailadres",
    placeholder: "je@bedrijf.nl",
    required: true
  },
  {
    id: "business",
    name: "business",
    type: "text",
    label: "Bedrijf",
    placeholder: "Jouw bedrijfsnaam",
    required: false,
    validation: {
      maxLength: 100
    }
  },
  {
    id: "subject",
    name: "subject",
    type: "select",
    label: "Onderwerp",
    placeholder: "Selecteer een onderwerp",
    required: true,
    options: [
      { value: "", label: "Selecteer een onderwerp" },
      { value: "platform", label: "Vragen over het platform" },
      { value: "demo", label: "Demo aanvragen" },
      { value: "pricing", label: "Prijzen en abonnementen" },
      { value: "partnership", label: "Samenwerking" },
      { value: "support", label: "Technische ondersteuning" },
      { value: "other", label: "Anders" }
    ]
  },
  {
    id: "message",
    name: "message",
    type: "textarea",
    label: "Jouw bericht",
    placeholder: "Vertel ons waar we je mee kunnen helpen...",
    required: true,
    validation: {
      minLength: 10,
      maxLength: 1000
    }
  }
];
---

<div class="bg-white rounded-2xl p-6 lg:p-8 border border-gray-200 shadow-lg">
  <!-- Form Header -->
  <div class="mb-8" data-form-header>
    <h2 class="text-2xl lg:text-3xl font-bold text-black mb-2">
      Stuur ons een bericht
    </h2>
    <p class="text-gray-600">We reageren binnen 24 uur op je bericht</p>
  </div>

  <!-- Contact Form -->
  <form class="space-y-6" id="contact-form" novalidate data-contact-form>
    {formFields.map((field, index) => (
      <div class="form-group" data-field-group data-index={index}>
        <label
          for={field.id}
          class="block text-sm font-semibold text-gray-900 mb-2"
        >
          {field.label} {field.required && <span class="text-secondary-200">*</span>}
        </label>
        
        {field.type === 'textarea' ? (
          <textarea
            id={field.id}
            name={field.name}
            rows="5"
            required={field.required}
            minlength={field.validation?.minLength}
            maxlength={field.validation?.maxLength}
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-secondary-200 focus:border-secondary-200 transition-all duration-200 bg-white focus:bg-gray-50 text-gray-900 placeholder-gray-500 resize-none"
            placeholder={field.placeholder}
            aria-describedby={`${field.id}-error`}
          ></textarea>
        ) : field.type === 'select' ? (
          <select
            id={field.id}
            name={field.name}
            required={field.required}
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-secondary-200 focus:border-secondary-200 transition-all duration-200 bg-white focus:bg-gray-50 text-gray-900 appearance-none"
            aria-describedby={`${field.id}-error`}
          >
            {field.options?.map((option) => (
              <option value={option.value} class="bg-white text-gray-900">
                {option.label}
              </option>
            ))}
          </select>
        ) : (
          <input
            type={field.type}
            id={field.id}
            name={field.name}
            required={field.required}
            minlength={field.validation?.minLength}
            maxlength={field.validation?.maxLength}
            pattern={field.validation?.pattern}
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-secondary-200 focus:border-secondary-200 transition-all duration-200 bg-white focus:bg-gray-50 text-gray-900 placeholder-gray-500"
            placeholder={field.placeholder}
            aria-describedby={`${field.id}-error`}
          />
        )}
        
        <!-- Error message container -->
        <div
          id={`${field.id}-error`}
          class="error-message hidden mt-2 text-sm text-red-600"
          role="alert"
          aria-live="polite"
        ></div>
      </div>
    ))}

    <!-- Privacy Notice -->
    <div class="form-group" data-privacy-notice>
      <div class="flex items-start space-x-3">
        <input
          type="checkbox"
          id="privacy"
          name="privacy"
          required
          class="mt-1 w-4 h-4 text-secondary-200 bg-white border-gray-300 rounded focus:ring-secondary-200 focus:ring-2"
        />
        <label for="privacy" class="text-sm text-gray-900 leading-relaxed">
          Ik ga akkoord met de 
          <a href="/privacy" class="text-secondary-500 hover:text-secondary-900 underline" target="_blank">
            privacyverklaring
          </a>
          en geef toestemming voor het verwerken van mijn gegevens.
          <span class="text-secondary-200">*</span>
        </label>
      </div>
      <div
        id="privacy-error"
        class="error-message hidden mt-2 text-sm text-red-300"
        role="alert"
        aria-live="polite"
      ></div>
    </div>

    <!-- Submit Button -->
    <div class="form-group">
      <button
        type="submit"
        id="submit-btn"
        class="w-full bg-tertiary-500 hover:brightness-110 hover:text-primary-900 text-black font-bold py-4 px-6 rounded-xl transition-all duration-300  focus:outline-none focus:ring-2 focus:ring-secondary-200 focus:ring-offset-2 focus:ring-offset-primary-900 disabled:opacity-50 disabled:cursor-not-allowed"
        data-submit-button
      >
       <span class="flex items-center justify-center space-x-2">
            <span>Verstuur bericht</span>
            <svg
              class="w-5 h-5 rotate-90"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
            </svg>
          </span>
        <span class="loading-spinner hidden">
          <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Versturen...
        </span>
      </button>
    </div>

    <!-- Success Message -->
    <div
      id="success-message"
      class="hidden p-4 bg-green-500/20 border border-green-400/30 rounded-xl"
      role="alert"
      aria-live="polite"
    >
      <div class="flex items-center space-x-2">
        <svg
          class="w-5 h-5 text-green-800"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
          ></path>
        </svg>
        <div>
          <h3 class="text-green-800 font-semibold">Bericht verzonden!</h3>
          <p class="text-green-700 text-sm">
            Bedankt voor je bericht. We nemen binnen 24 uur contact met je op.
          </p>
        </div>
      </div>
    </div>

    <!-- Error Message -->
    <div
      id="error-message"
      class="hidden p-4 bg-red-500/20 border border-red-400/30 rounded-xl"
      role="alert"
      aria-live="polite"
    >
      <div class="flex items-center space-x-2">
        <svg
          class="w-5 h-5 text-red-400"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
          ></path>
        </svg>
        <div>
          <h3 class="text-red-400 font-semibold">Er is iets misgegaan</h3>
          <p class="text-red-300 text-sm">
            Probeer het opnieuw of neem direct contact met ons op.
          </p>
        </div>
      </div>
    </div>
  </form>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const successMessage = document.getElementById('success-message') as HTMLElement;
    const errorMessage = document.getElementById('error-message') as HTMLElement;

    if (!form || !submitBtn) return;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Hide previous messages
      successMessage.classList.add('hidden');
      errorMessage.classList.add('hidden');

      // Show loading state
      submitBtn.disabled = true;
      const submitText = submitBtn.querySelector('span:first-child') as HTMLElement;
      const loadingSpinner = submitBtn.querySelector('.loading-spinner') as HTMLElement;

      if (submitText) submitText.classList.add('hidden');
      if (loadingSpinner) loadingSpinner.classList.remove('hidden');

      try {
        // Get form data
        const formData = new FormData(form);

        // Submit to Astro action endpoint
        const response = await fetch('/_actions/submitContactForm', {
          method: 'POST',
          body: formData,
        });

        const result = await response.json();

        if (result.success || response.ok) {
          // Show success message
          successMessage.classList.remove('hidden');
          form.reset();

          // Scroll to success message
          successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
        } else {
          throw new Error(result.error || 'Er is een fout opgetreden');
        }
      } catch (error) {
        // Show error message
        errorMessage.classList.remove('hidden');

        // Update error message with specific error if available
        const errorText = errorMessage.querySelector('p');
        if (errorText && error instanceof Error) {
          errorText.textContent = error.message;
        }

        console.error('Form submission error:', error);
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        if (submitText) submitText.classList.remove('hidden');
        if (loadingSpinner) loadingSpinner.classList.add('hidden');
      }
    });

    // Real-time validation
    const requiredFields = form.querySelectorAll('[required]');
    requiredFields.forEach((field) => {
      field.addEventListener('blur', validateField);
      field.addEventListener('input', clearFieldError);
    });

    function validateField(e: Event) {
      const field = e.target as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
      const errorElement = document.getElementById(`${field.id}-error`);

      if (!errorElement) return;

      let errorMessage = '';

      // Check if field is required and empty
      if (field.hasAttribute('required') && !field.value.trim()) {
        errorMessage = 'Dit veld is verplicht';
      }
      // Check email format
      else if (field.type === 'email' && field.value && !isValidEmail(field.value)) {
        errorMessage = 'Voer een geldig e-mailadres in';
      }
      // Check minimum length
      else if (field.hasAttribute('minlength')) {
        const minLength = parseInt(field.getAttribute('minlength') || '0');
        if (field.value.length > 0 && field.value.length < minLength) {
          errorMessage = `Minimaal ${minLength} karakters vereist`;
        }
      }
      // Check maximum length
      else if (field.hasAttribute('maxlength')) {
        const maxLength = parseInt(field.getAttribute('maxlength') || '0');
        if (field.value.length > maxLength) {
          errorMessage = `Maximaal ${maxLength} karakters toegestaan`;
        }
      }

      if (errorMessage) {
        errorElement.textContent = errorMessage;
        errorElement.classList.remove('hidden');
        field.classList.add('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
        field.classList.remove('border-gray-300', 'focus:border-secondary-200', 'focus:ring-secondary-200');
      } else {
        clearFieldError(e);
      }
    }

    function clearFieldError(e: Event) {
      const field = e.target as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
      const errorElement = document.getElementById(`${field.id}-error`);

      if (errorElement) {
        errorElement.classList.add('hidden');
        field.classList.remove('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
        field.classList.add('border-gray-300', 'focus:border-secondary-200', 'focus:ring-secondary-200');
      }
    }

    function isValidEmail(email: string): boolean {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }
  });
</script>

