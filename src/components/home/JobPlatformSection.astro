---
import Section from "../Section.astro";
---

<Section
  sectionClassName="bg-primary-900"
  className="relative py-8 md:py-16 lg:py-24 gap-8 items-center justify-center grid grid-cols-1 lg:grid-cols-2"
>
  <img
    class="absolute -top-24 opacity-5 z-10 hidden lg:block"
    src="/svg/Web-devices-amico.svg"
  />
  <div class="flex justify-center lg:justify-start order-2 lg:order-1">
    <div class="relative z-30">
      <!-- iPhone mockup with embedded video -->
      <svg
        width="300"
        height="600"
        viewBox="0 0 300 600"
        class="drop-shadow-2xl w-48 md:w-64 lg:w-80 h-auto"
        xmlns="http://www.w3.org/2000/svg"
      >
        <defs>
          <!-- Screen area mask for video -->
          <mask id="screenMask">
            <rect width="300" height="600" fill="black"></rect>
            <rect
              x="25"
              y="80"
              width="250"
              height="440"
              rx="35"
              ry="35"
              fill="white"></rect>
          </mask>

          <!-- Gradient for device -->
          <linearGradient
            id="deviceGradient"
            x1="0%"
            y1="0%"
            x2="100%"
            y2="100%"
          >
            <stop offset="0%" style="stop-color:#1a1a1a;stop-opacity:1"></stop>
            <stop offset="100%" style="stop-color:#2d2d2d;stop-opacity:1"
            ></stop>
          </linearGradient>

          <!-- Screen gradient -->
          <linearGradient
            id="screenGradient"
            x1="0%"
            y1="0%"
            x2="100%"
            y2="100%"
          >
            <stop offset="0%" style="stop-color:#000000;stop-opacity:1"></stop>
            <stop offset="100%" style="stop-color:#1a1a1a;stop-opacity:1"
            ></stop>
          </linearGradient>
        </defs>

        <!-- Device body -->
        <rect
          x="0"
          y="0"
          width="300"
          height="600"
          rx="45"
          ry="45"
          fill="url(#deviceGradient)"
          stroke="#333"
          stroke-width="2"></rect>

        <!-- Video.js player embedded in screen area -->
        <foreignObject
          x="25"
          y="80"
          width="250"
          height="440"
          mask="url(#screenMask)"
        >
          <div
            xmlns="http://www.w3.org/1999/xhtml"
            style="width: 100%; height: 100%; border-radius: 35px; overflow: hidden;"
          >
            <video
              controls
              loop
              muted
              id="iphone-video-player"
              class="video-js vjs-default-skin"
              style="width: 100%; height: 100%; object-fit: cover;"
              data-setup="{}"
            >
              <source src="https://ebnd.nl/CREATOR.mp4" type="video/mp4" />
              <p class="vjs-no-js">
                To view this video please enable JavaScript, and consider
                upgrading to a web browser that
                <a
                  href="https://videojs.com/html5-video-support/"
                  target="_blank">supports HTML5 video</a
                >.
              </p>
            </video>
          </div>
        </foreignObject>

        <!-- Screen border overlay -->
        <rect
          x="25"
          y="80"
          width="250"
          height="440"
          rx="35"
          ry="35"
          fill="none"
          stroke="#444"
          stroke-width="1"></rect>

        <!-- Dynamic Island (iPhone 14 Pro/15 style) -->
        <rect
          x="120"
          y="25"
          width="60"
          height="25"
          rx="12.5"
          ry="12.5"
          fill="#000"></rect>

        <!-- Speaker -->
        <rect x="130" y="15" width="40" height="4" rx="2" ry="2" fill="#333"
        ></rect>

        <!-- Volume buttons -->
        <rect x="-2" y="120" width="6" height="25" rx="3" ry="3" fill="#2d2d2d"
        ></rect>
        <rect x="-2" y="160" width="6" height="25" rx="3" ry="3" fill="#2d2d2d"
        ></rect>

        <!-- Power button -->
        <rect x="296" y="140" width="6" height="35" rx="3" ry="3" fill="#2d2d2d"
        ></rect>

        <!-- Home indicator -->
        <rect x="125" y="545" width="50" height="4" rx="2" ry="2" fill="#666"
        ></rect>
      </svg>
    </div>
  </div>
  <!-- <img class="absolute top-0 right-0 h-96 z-30 rotate-270" src="/svg/particle/rocket.svg" /> -->

  <div
    class="relative flex flex-col gap-4 z-30 text-center lg:text-left order-1 lg:order-2"
  >
    <h1
      class="text-4xl md:text-6xl lg:text-7xl xl:text-8xl font-bold text-white relative z-50 text-shadow shadow-black"
    >
      Jobplatform <span class="text-secondary-200">Nutzy</span>
    </h1>
    <!-- <img src="/svg/" -->
    <p class="text-md lg:text-xl pt-4 text-white max-w-2xl mx-auto lg:mx-0">
      Met zo'n 30.000 bezoekers per maand en 5% conversie percentage zien we dat
      ons Nutzy jobplatform echt aanslaat bij de jongere generaties. Lees meer
      over ons platform op onze Nutzy pagina.
    </p>
    <a
      href="/platform"
      class="lg:px-8 lg:py-4 mr-auto px-4 py-2 w-fit bg-tertiary-500 text-black font-bold rounded-lg hover:brightness-105 transition-all duration-300"
    >
      Meer info
    </a>
  </div>
</Section>

<script>
  import videojs from "video.js";

  document.addEventListener("DOMContentLoaded", function () {
    // Wait a bit to ensure DOM is fully ready
    setTimeout(() => {
      const videoElement = document.getElementById("iphone-video-player");
      if (!videoElement) {
        console.error("Video element not found");
        return;
      }

      // Initialize Video.js player
      const player = videojs("iphone-video-player", {
        controls: true, // Show controls
        autoplay: true, // Changed to true
        loop: true,
        muted: true,
        fluid: false, // Disable fluid for better fullscreen control
        responsive: true,
        playsinline: true,
        preload: "auto",
        sources: [
          {
            src: "https://ebnd.nl/CREATOR.mp4",
            type: "video/mp4",
          },
        ],
      });

      // Ensure video plays automatically with multiple attempts
      player.ready(() => {
        console.log("Video.js player ready");

        // First attempt - immediate play
        player.play().catch((e) => {
          console.log("First autoplay attempt failed:", e);

          // Second attempt - after a short delay
          setTimeout(() => {
            player.play().catch((e2) => {
              console.log("Second autoplay attempt failed:", e2);

              // Third attempt - ensure muted and try again
              player.muted(true);
              player.play().catch((e3) => {
                console.log("All autoplay attempts failed:", e3);
              });
            });
          }, 500);
        });
      });

      // Store playback state globally to track across all events
      let wasPlayingBeforeFullscreen = false;

      // Click on video to go fullscreen (preserve playback)
      player.on("click", function (event) {
        // Only go fullscreen if not clicking on controls
        if (
          !player.isFullscreen() &&
          !event.target.closest(".vjs-control-bar")
        ) {
          // Prevent the click from pausing the video
          event.preventDefault();
          event.stopPropagation();

          // Capture playing state immediately before fullscreen
          wasPlayingBeforeFullscreen = !player.paused();

          // Force video to continue playing if it was playing
          if (wasPlayingBeforeFullscreen) {
            player.play();
          }

          // Request fullscreen
          player.requestFullscreen();
        } else if (
          player.isFullscreen() &&
          !event.target.closest(".vjs-control-bar")
        ) {
          // If in fullscreen and clicking video (not controls), exit fullscreen
          event.preventDefault();
          event.stopPropagation();

          wasPlayingBeforeFullscreen = !player.paused();

          // Force video to continue playing if it was playing
          if (wasPlayingBeforeFullscreen) {
            player.play();
          }

          player.exitFullscreen();
        }
      });

      // Handle fullscreen events with better playback preservation
      player.on("fullscreenchange", function () {
        if (player.isFullscreen()) {
          // Entering fullscreen - unmute
          player.muted(false);
          player.controls(true);
          player.volume(0.8);
          player
            .play()
            .catch((e) => console.log("Play in fullscreen failed:", e));
        } else {
          player.controls(false);

          // Exiting fullscreen - mute
          player.muted(true);

          // Ensure video continues playing if it was playing before
          if (wasPlayingBeforeFullscreen) {
            setTimeout(() => {
              player
                .play()
                .catch((e) =>
                  console.log("Play after exit fullscreen failed:", e)
                );
            }, 200);
          }
        }
      });

      // Additional safety: prevent pause on click events
      player.on("pause", function (event) {
        // If video was paused due to fullscreen transition, resume it
        if (
          wasPlayingBeforeFullscreen &&
          (player.isFullscreen() || document.fullscreenElement)
        ) {
          setTimeout(() => {
            player
              .play()
              .catch((e) => console.log("Resume after pause failed:", e));
          }, 100);
        }
      });

      // Handle cleanup
      window.addEventListener("beforeunload", () => {
        if (player) {
          player.dispose();
        }
      });
    }, 100); // Close setTimeout
  }); // Close DOMContentLoaded
</script>

<style>
  /* Custom Video.js styling for iPhone mockup */
  #iphone-video-player {
    border-radius: 35px !important;
  }

  /* Style the big play button to be smaller and more subtle */
  #iphone-video-player .vjs-big-play-button {
    width: 60px !important;
    height: 60px !important;
    border-radius: 50% !important;
    background-color: rgba(0, 0, 0, 0.6) !important;
    border: 2px solid rgba(255, 255, 255, 0.8) !important;
    font-size: 20px !important;
    line-height: 56px !important;
    top: 50% !important;
    left: 50% !important;
    transform: translate(-50%, -50%) !important;
  }

  /* Style the control bar to fit the iPhone mockup */
  #iphone-video-player .vjs-control-bar {
    background: linear-gradient(
      to top,
      rgba(0, 0, 0, 0.8),
      transparent
    ) !important;
    border-radius: 0 0 35px 35px !important;
    height: 50px !important;
    padding: 0 15px !important;
  }

  /* Style control buttons */
  #iphone-video-player .vjs-control-bar .vjs-button {
    color: white !important;
  }

  /* Style progress bar */
  #iphone-video-player .vjs-progress-control {
    height: 6px !important;
  }

  #iphone-video-player .vjs-progress-holder {
    height: 6px !important;
    border-radius: 3px !important;
  }

  /* Ensure video fills the container */
  #iphone-video-player .vjs-tech {
    object-fit: cover !important;
    border-radius: 35px !important;
  }

  /* Remove Video.js default styling that might interfere */
  #iphone-video-player.video-js {
    background-color: transparent !important;
    border-radius: 35px !important;
  }

  /* Fullscreen centering styles */
  #iphone-video-player.vjs-fullscreen {
    width: 100vw !important;
    height: 100vh !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    background-color: black !important;
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    z-index: 9999 !important;
  }

  #iphone-video-player.vjs-fullscreen .vjs-tech {
    width: auto !important;
    height: 100vh !important;
    max-width: 100vw !important;
    object-fit: contain !important;
    border-radius: 0 !important;
    position: relative !important;
    top: auto !important;
    left: auto !important;
    transform: none !important;
    margin: 0 !important;
  }
</style>
