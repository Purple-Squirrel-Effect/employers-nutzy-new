---
import Section from "../Section.astro";
---

<Section
  sectionClassName="bg-primary-900"
  className="relative py-8 md:py-16 lg:py-24 gap-8 items-center justify-center grid grid-cols-1 lg:grid-cols-2"
>
  <img
    class="absolute -top-24 opacity-5 z-10 hidden lg:block"
    src="/svg/Web-devices-amico.svg"
  />
  <div class="flex justify-center lg:justify-start order-2 lg:order-1">
    <div class="relative z-30 iphone-mockup-container">
      <!-- iPhone Frame (Pure SVG without foreignObject) -->
      <svg
        width="300"
        height="600"
        viewBox="0 0 300 600"
        class="drop-shadow-2xl w-48 md:w-64 lg:w-80 h-auto relative z-20"
        xmlns="http://www.w3.org/2000/svg"
      >
        <defs>
          <!-- Gradient for device -->
          <linearGradient
            id="deviceGradient"
            x1="0%"
            y1="0%"
            x2="100%"
            y2="100%"
          >
            <stop offset="0%" style="stop-color:#1a1a1a;stop-opacity:1"></stop>
            <stop offset="100%" style="stop-color:#2d2d2d;stop-opacity:1"
            ></stop>
          </linearGradient>
        </defs>

        <!-- Device body -->
        <rect
          x="0"
          y="0"
          width="300"
          height="600"
          rx="45"
          ry="45"
          fill="url(#deviceGradient)"
          stroke="#333"
          stroke-width="2"></rect>

        <!-- Screen border overlay -->
        <rect
          x="25"
          y="80"
          width="250"
          height="440"
          rx="35"
          ry="35"
          fill="none"
          stroke="#444"
          stroke-width="1"></rect>

        <!-- Dynamic Island (iPhone 14 Pro/15 style) -->
        <rect
          x="120"
          y="25"
          width="60"
          height="25"
          rx="12.5"
          ry="12.5"
          fill="#000"></rect>

        <!-- Speaker -->
        <rect x="130" y="15" width="40" height="4" rx="2" ry="2" fill="#333"
        ></rect>

        <!-- Volume buttons -->
        <rect x="-2" y="120" width="6" height="25" rx="3" ry="3" fill="#2d2d2d"
        ></rect>
        <rect x="-2" y="160" width="6" height="25" rx="3" ry="3" fill="#2d2d2d"
        ></rect>

        <!-- Power button -->
        <rect x="296" y="140" width="6" height="35" rx="3" ry="3" fill="#2d2d2d"
        ></rect>

        <!-- Home indicator -->
        <rect x="125" y="545" width="50" height="4" rx="2" ry="2" fill="#666"
        ></rect>
      </svg>

      <!-- Video positioned absolutely over the screen area (Safari compatible) -->
      <div class="absolute inset-0 z-50" data-screen-content>
        <div
          class="absolute overflow-hidden bg-black iphone-screen-container"
          data-video-container
          id="video-container-dimensions"
          style="
            top: 13.33%;
            left: 8.33%;
            width: 83.33%;
            height: 73.33%;
            border-radius: 35px;
            clip-path: inset(0 round 35px);
            -webkit-clip-path: inset(0 round 35px);
          "
        >
          <video
            controls
            loop
            muted
            id="iphone-video-player"
            class="video-js vjs-default-skin w-full h-full object-cover bg-red-500"
            style="border-radius: 35px; pointer-events: auto; cursor: pointer;"
            data-setup="{}"
            playsinline
            preload="metadata"
          >
            <source src="https://ebnd.nl/CREATOR.mp4" type="video/mp4" />
            <p class="vjs-no-js">
              To view this video please enable JavaScript, and consider
              upgrading to a web browser that
              <a href="https://videojs.com/html5-video-support/" target="_blank"
                >supports HTML5 video</a
              >.
            </p>
          </video>
        </div>
      </div>
    </div>
  </div>
  <!-- <img class="absolute top-0 right-0 h-96 z-30 rotate-270" src="/svg/particle/rocket.svg" /> -->

  <div
    class="relative flex flex-col gap-4 z-30 text-center lg:text-left order-1 lg:order-2"
  >
    <h1
      class="text-4xl md:text-6xl lg:text-7xl xl:text-8xl font-bold text-white relative z-50 text-shadow shadow-black"
    >
      Het <span class="text-secondary-200">Nutzy</span> Jobplatform
    </h1>
    <!-- <img src="/svg/" -->
    <p class="text-md lg:text-xl pt-4 text-white max-w-2xl mx-auto lg:mx-0">
      Met 30.000 bezoekers per maand en een conversie van 5% is ons jobplatform
      dé plek waar Gen Z hun eerste baan, stage of traineeship vindt. Hier zien
      ze in één oogopslag dat ze passen bij jouw organisatie.
    </p>
    <a
      href="/platform"
      class="lg:px-8 lg:py-4 mx-auto lg:mx-0 px-4 py-2 w-fit bg-tertiary-500 text-black font-bold rounded-lg hover:brightness-105 transition-all duration-300"
    >
      Meer info
    </a>
  </div>
</Section>

<script>
  import videojs from "video.js";

  document.addEventListener("DOMContentLoaded", function () {
    // Wait a bit to ensure DOM is fully ready
    setTimeout(() => {
      const videoElement = document.getElementById("iphone-video-player");
      const containerElement = document.getElementById(
        "video-container-dimensions"
      );

      if (!videoElement || !containerElement) {
        console.error("Video element or container not found");
        return;
      }

      // Get the actual pixel dimensions of the container for logging
      const containerRect = containerElement.getBoundingClientRect();
      const containerWidth = Math.floor(containerRect.width);
      const containerHeight = Math.floor(containerRect.height);

      console.log(
        "Container dimensions:",
        containerWidth,
        "x",
        containerHeight
      );

      // Initialize Video.js player without explicit dimensions to avoid auto-generated CSS classes
      const player = videojs("iphone-video-player", {
        controls: true, // Show controls
        autoplay: true, // Changed to true
        loop: true,
        muted: true,
        fluid: false, // Disable fluid
        responsive: false, // Disable responsive
        playsinline: true,
        preload: "auto",
        // Don't set width/height here to avoid Video.js generating dimension classes
        sources: [
          {
            src: "https://ebnd.nl/CREATOR.mp4",
            type: "video/mp4",
          },
        ],
      });

      // Ensure video plays automatically with multiple attempts
      player.ready(() => {
        console.log("Video.js player ready");

        // Hide controls initially for iPhone mockup
        player.controls(false);

        // First attempt - immediate play
        player.play().catch((e) => {
          console.log("First autoplay attempt failed:", e);

          // Second attempt - after a short delay
          setTimeout(() => {
            player.play().catch((e2) => {
              console.log("Second autoplay attempt failed:", e2);

              // Third attempt - ensure muted and try again
              player.muted(true);
              player.play().catch((e3) => {
                console.log("All autoplay attempts failed:", e3);
              });
            });
          }, 500);
        });
      });

      // Store playback state globally to track across all events
      let wasPlayingBeforeFullscreen = false;

      // Function to handle fullscreen toggle
      function handleFullscreenToggle(event) {
        console.log("Fullscreen toggle triggered!", event.type, event.target);
        console.log("Is fullscreen:", player.isFullscreen());
        console.log(
          "Clicked on control bar:",
          !!event.target.closest(".vjs-control-bar")
        );

        // Only go fullscreen if not clicking on controls
        if (
          !player.isFullscreen() &&
          !event.target.closest(".vjs-control-bar")
        ) {
          console.log("Attempting to enter fullscreen...");
          // Prevent the event from pausing the video
          event.preventDefault();
          event.stopPropagation();

          // Capture playing state immediately before fullscreen
          wasPlayingBeforeFullscreen = !player.paused();

          // Force video to continue playing if it was playing
          if (wasPlayingBeforeFullscreen) {
            player.play();
          }

          // Request fullscreen
          player
            .requestFullscreen()
            .then(() => {
              console.log("Fullscreen request successful");
            })
            .catch((e) => {
              console.error("Fullscreen request failed:", e);
            });
        } else if (
          player.isFullscreen() &&
          !event.target.closest(".vjs-control-bar")
        ) {
          console.log("Attempting to exit fullscreen...");
          // If in fullscreen and clicking video (not controls), exit fullscreen
          event.preventDefault();
          event.stopPropagation();

          wasPlayingBeforeFullscreen = !player.paused();

          // Force video to continue playing if it was playing
          if (wasPlayingBeforeFullscreen) {
            player.play();
          }

          player.exitFullscreen();
        }
      }

      // Desktop click events
      player.on("click", handleFullscreenToggle);

      // Mobile touch events - Video.js might not handle these properly
      const playerElement = player.el();
      if (playerElement) {
        // Better mobile touch handling with tap detection
        let touchStartTime = 0;
        let touchStartY = 0;
        let touchStartX = 0;

        playerElement.addEventListener(
          "touchstart",
          function (event) {
            touchStartTime = Date.now();
            if (event.touches && event.touches[0]) {
              touchStartY = event.touches[0].clientY;
              touchStartX = event.touches[0].clientX;
            }
          },
          { passive: true }
        );

        playerElement.addEventListener(
          "touchend",
          function (event) {
            const touchDuration = Date.now() - touchStartTime;
            let touchEndY = 0;
            let touchEndX = 0;

            if (event.changedTouches && event.changedTouches[0]) {
              touchEndY = event.changedTouches[0].clientY;
              touchEndX = event.changedTouches[0].clientX;
            }

            // Calculate movement distance
            const moveY = Math.abs(touchEndY - touchStartY);
            const moveX = Math.abs(touchEndX - touchStartX);
            const totalMove = Math.sqrt(moveX * moveX + moveY * moveY);

            // Only trigger on quick taps with minimal movement (not swipes or long presses)
            if (touchDuration < 300 && totalMove < 10) {
              console.log("Quick tap detected on mobile");
              event.preventDefault();
              handleFullscreenToggle(event);
            }
          },
          { passive: false }
        );
      }

      // Handle fullscreen events with better playback preservation
      player.on("fullscreenchange", function () {
        if (player.isFullscreen()) {
          // Entering fullscreen - unmute
          player.muted(false);
          player.controls(true);
          player.volume(0.8);
          player
            .play()
            .catch((e) => console.log("Play in fullscreen failed:", e));
        } else {
          player.controls(false);

          // Exiting fullscreen - mute
          player.muted(true);

          // Ensure video continues playing if it was playing before
          if (wasPlayingBeforeFullscreen) {
            setTimeout(() => {
              player
                .play()
                .catch((e) =>
                  console.log("Play after exit fullscreen failed:", e)
                );
            }, 200);
          }
        }
      });

      // Additional safety: prevent pause on click events
      player.on("pause", function (event) {
        // If video was paused due to fullscreen transition, resume it
        if (
          wasPlayingBeforeFullscreen &&
          (player.isFullscreen() || document.fullscreenElement)
        ) {
          setTimeout(() => {
            player
              .play()
              .catch((e) => console.log("Resume after pause failed:", e));
          }, 100);
        }
      });

      // Video dimensions are now controlled by CSS, no need for resize handler

      // Handle cleanup
      window.addEventListener("beforeunload", () => {
        if (player) {
          player.dispose();
        }
      });
    }, 100); // Close setTimeout
  }); // Close DOMContentLoaded
</script>

<style>
  /* iPhone Mockup Container - Safari Compatible */
  .iphone-mockup-container {
    /* Ensure proper stacking context */
    isolation: isolate;
  }

  /* iPhone Screen Container - Precise video containment */
  .iphone-screen-container {
    /* Ensure video is perfectly contained within iPhone screen boundaries */
    position: absolute;
    overflow: hidden;
    /* Use CSS mask for perfect screen shape matching - Safari compatible */
    -webkit-mask: radial-gradient(
      ellipse at center,
      black 99%,
      transparent 100%
    );
    mask: radial-gradient(ellipse at center, black 99%, transparent 100%);
    /* Additional containment for video overflow */
    contain: layout style paint;
    /* Safari-specific fixes */
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
  }

  .iphone-screen-container video {
    /* Ensure video respects container boundaries */
    max-width: 100%;
    max-height: 100%;
    object-fit: cover;
    object-position: center;
    /* Prevent any potential overflow - Safari specific */
    transform: scale(0.999); /* Slight scale down to ensure no edge overflow */
    -webkit-transform: scale(0.999);
    /* Force hardware acceleration on Safari */
    -webkit-transform: translateZ(0) scale(0.999);
    will-change: transform;
  }

  /* Ensure proper stacking and containment */
  [data-screen-content] {
    /* Create a new stacking context */
    isolation: isolate;
    /* Ensure content doesn't overflow iPhone frame */
    overflow: hidden;
    /* Safari-specific containment */
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
  }

  /* Custom Video.js styling for iPhone mockup */
  #iphone-video-player {
    border-radius: 35px !important;
    /* Safari-specific video fixes */
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    /* Force container dimensions to match iPhone screen */
    width: 100% !important;
    height: 100% !important;
    max-width: 100% !important;
    max-height: 100% !important;
    min-width: 100% !important;
    min-height: 100% !important;
  }

  /* Override Video.js auto-generated dimension classes */
  .iphone-video-player-dimensions {
    width: 100% !important;
    height: 100% !important;
    max-width: 100% !important;
    max-height: 100% !important;
  }

  /* Style the big play button to be smaller and more subtle */
  #iphone-video-player .vjs-big-play-button {
    width: 60px !important;
    height: 60px !important;
    border-radius: 50% !important;
    background-color: rgba(0, 0, 0, 0.6) !important;
    border: 2px solid rgba(255, 255, 255, 0.8) !important;
    font-size: 20px !important;
    line-height: 56px !important;
    top: 50% !important;
    left: 50% !important;
    transform: translate(-50%, -50%) !important;
    -webkit-transform: translate(-50%, -50%) !important;
  }

  /* Style the control bar to fit the iPhone mockup */
  #iphone-video-player .vjs-control-bar {
    background: linear-gradient(
      to top,
      rgba(0, 0, 0, 0.8),
      transparent
    ) !important;
    border-radius: 0 0 35px 35px !important;
    height: 50px !important;
    padding: 0 15px !important;
  }

  /* Style control buttons */
  #iphone-video-player .vjs-control-bar .vjs-button {
    color: white !important;
  }

  /* Style progress bar */
  #iphone-video-player .vjs-progress-control {
    height: 6px !important;
  }

  #iphone-video-player .vjs-progress-holder {
    height: 6px !important;
    border-radius: 3px !important;
  }

  /* Ensure video fills the container with Safari fixes */
  #iphone-video-player .vjs-tech {
    object-fit: cover !important;
    border-radius: 35px !important;
    /* Safari-specific fixes */
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
  }

  /* Remove Video.js default styling that might interfere */
  #iphone-video-player.video-js {
    background-color: transparent !important;
    border-radius: 35px !important;
    /* Safari containment fixes */
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    overflow: hidden !important;
  }

  /* Fullscreen centering styles */
  #iphone-video-player.vjs-fullscreen {
    width: 100vw !important;
    height: 100vh !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    background-color: black !important;
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    z-index: 9999 !important;
    /* Reset transforms in fullscreen */
    -webkit-transform: none !important;
    transform: none !important;
  }

  #iphone-video-player.vjs-fullscreen .vjs-tech {
    width: auto !important;
    height: 100vh !important;
    max-width: 100vw !important;
    object-fit: contain !important;
    border-radius: 0 !important;
    position: relative !important;
    top: auto !important;
    left: auto !important;
    transform: none !important;
    -webkit-transform: none !important;
    margin: 0 !important;
  }

  /* Accessibility: Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .iphone-screen-container video {
      animation: none !important;
      transform: scale(0.999) !important;
      -webkit-transform: scale(0.999) !important;
    }

    #iphone-video-player .vjs-big-play-button {
      transition: none !important;
    }
  }
</style>
