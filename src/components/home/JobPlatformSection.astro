---
import Section from "../Section.astro";
import SectionDescription from "../SectionDescription.astro";
import SectionTitle from "../SectionTitle.astro";
---

<div class="h-screen w-full overflow-hidden absolute">
  <svg
    id="nutzy-logo-platform"
    class="w-screen h-screen absolute z-50 -translate-x-1/8"
    viewBox="0 0 1123 467"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M118.254 5.79363C119.081 1.9619 114.034 -0.686125 110.585 1.75849C78.8248 24.2918 -9.2276 96.6549 1.06379 199.325C5.8968 247.518 30.5136 283.589 47.8802 304.021C50.1803 306.728 54.9756 306.045 56.2049 302.843C67.2777 273.972 77.6534 240.108 84.7563 201.797C88.5059 181.558 90.9193 162.364 92.3651 144.43C92.701 140.241 99.0138 139.033 101.295 142.719L115.001 164.857C116.063 166.572 118.311 167.414 120.445 166.892C131.904 164.096 147.253 161.477 165.452 161.391C185.485 161.299 202.222 164.308 214.338 167.409C216.511 167.964 218.817 167.109 219.878 165.347L233.397 142.897C235.584 139.266 241.754 140.273 242.334 144.354C247.001 177.151 253.733 212.722 263.347 250.483C272.378 285.954 282.764 318.672 293.634 348.45C294.883 351.875 300.098 352.428 302.237 349.364C316.551 328.844 342.31 283.503 331.821 228.504C321.218 172.89 279.223 137.128 266.332 126.962C205.181 78.7387 141.06 87.7452 121.461 44.6771C115.284 31.1049 115.773 17.2876 118.254 5.79363Z"
      class="fill-primary-300"></path>
    <path
      d="M105.498 358.251C104.59 356.889 96.1274 343.709 102.126 330.457C102.811 328.942 105.758 322.848 112.689 318.86C121.293 313.906 130.452 315.415 148.417 318.639C154.814 319.787 161.995 321.394 169.765 323.674C169.667 320.537 169.649 316.257 169.992 311.201C170.884 297.937 171.329 291.305 175.158 288.658C177.644 286.943 186.062 289.534 202.798 294.787C213.849 298.255 219.401 300.06 220.77 303.423C222.334 307.264 220.188 311.473 215.833 319.735C212.058 326.893 208.069 332.39 205.046 336.146C222.911 341.06 234.624 348.826 241.298 354.125C250.049 361.073 252.037 365.292 252.909 368.099C255.687 377.028 252.426 388.566 245.495 394.796C227.228 411.22 188.208 386.527 179.877 398.518C175.192 405.26 183.68 418.631 187.968 423.901C196.273 434.113 207.407 436.803 210.663 437.471C202.881 444.685 195.498 449.531 190.013 452.674C190.013 452.674 176.05 460.674 147.519 465.92C145.762 466.241 142.315 466.823 138.53 465.48C134.946 464.212 132.749 461.82 131.565 460.449C127.058 455.241 117.889 442.562 106.621 425.215C109.037 425.261 136.191 425.538 139.429 414.711C139.777 413.545 139.758 412.559 139.728 412.102C139.237 404.393 127.107 401.57 114.035 392.609C110.337 390.075 105.168 386.09 99.6543 380.135C101.601 372.84 103.549 365.545 105.498 358.251Z"
      class="fill-primary-300"></path>
    <path
      d="M128.118 231.397C128.118 238.689 124.73 244.599 120.552 244.599C116.374 244.599 112.988 238.689 112.988 231.397C112.988 224.105 116.374 218.194 120.552 218.194C124.73 218.194 128.118 224.105 128.118 231.397Z"
      class="fill-primary-300"></path>
    <path
      d="M221.973 230.521C221.973 237.813 218.587 243.723 214.407 243.723C210.231 243.723 206.844 237.813 206.844 230.521C206.844 223.229 210.231 217.318 214.407 217.318C218.587 217.318 221.973 223.229 221.973 230.521Z"
      class="fill-primary-300"></path>
    <path
      d="M187.176 254.551C187.176 248.573 178.254 243.724 167.252 243.724C156.247 243.724 147.326 248.573 147.326 254.551C147.326 260.166 155.188 264.781 165.257 265.323V273.763C165.257 274.976 166.274 275.967 167.52 275.967C168.763 275.967 169.783 274.976 169.783 273.763V265.283C179.589 264.605 187.176 260.065 187.176 254.551Z"
      class="fill-primary-300"></path>
  </svg>
</div>

<Section
  sectionClassName="bg-primary-900 overflow-hidden"
  className="relative py-8 md:py-16 lg:py-24 gap-8 items-center justify-center grid grid-cols-1 lg:grid-cols-2"
>
  <img
    class="absolute -top-24 opacity-5 z-10 hidden lg:block"
    src="/svg/Web-devices-amico.svg"
  />
  <div class="flex justify-center lg:justify-start order-2 lg:order-1">
    <div class="relative z-30 iphone-mockup-container">
      <!-- iPhone Frame (Pure SVG without foreignObject) -->
      <svg
        width="300"
        height="600"
        viewBox="0 0 300 600"
        class="drop-shadow-2xl w-48 md:w-64 lg:w-80 h-auto relative z-20"
        xmlns="http://www.w3.org/2000/svg"
      >
        <defs>
          <!-- Gradient for device -->
          <linearGradient
            id="deviceGradient"
            x1="0%"
            y1="0%"
            x2="100%"
            y2="100%"
          >
            <stop offset="0%" style="stop-color:#1a1a1a;stop-opacity:1"></stop>
            <stop offset="100%" style="stop-color:#2d2d2d;stop-opacity:1"
            ></stop>
          </linearGradient>
        </defs>

        <!-- Device body -->
        <rect
          x="0"
          y="0"
          width="300"
          height="600"
          rx="45"
          ry="45"
          fill="url(#deviceGradient)"
          stroke="#333"
          stroke-width="2"></rect>

        <!-- Screen border overlay -->
        <rect
          x="25"
          y="80"
          width="250"
          height="440"
          rx="35"
          ry="35"
          fill="none"
          stroke="#444"
          stroke-width="1"></rect>

        <!-- Dynamic Island (iPhone 14 Pro/15 style) -->
        <rect
          x="120"
          y="25"
          width="60"
          height="25"
          rx="12.5"
          ry="12.5"
          fill="#000"></rect>

        <!-- Speaker -->
        <rect x="130" y="15" width="40" height="4" rx="2" ry="2" fill="#333"
        ></rect>

        <!-- Volume buttons -->
        <rect x="-2" y="120" width="6" height="25" rx="3" ry="3" fill="#2d2d2d"
        ></rect>
        <rect x="-2" y="160" width="6" height="25" rx="3" ry="3" fill="#2d2d2d"
        ></rect>

        <!-- Power button -->
        <rect x="296" y="140" width="6" height="35" rx="3" ry="3" fill="#2d2d2d"
        ></rect>

        <!-- Home indicator -->
        <rect x="125" y="545" width="50" height="4" rx="2" ry="2" fill="#666"
        ></rect>
      </svg>

      <!-- Video positioned absolutely over the screen area (Safari compatible) -->
      <div class="absolute inset-0 z-50" data-screen-content>
        <div
          class="absolute overflow-hidden bg-black iphone-screen-container"
          data-video-container
          id="video-container-dimensions"
          style="
            top: 13.33%;
            left: 8.33%;
            width: 83.33%;
            height: 73.33%;
            border-radius: 35px;
            clip-path: inset(0 round 35px);
            -webkit-clip-path: inset(0 round 35px);
          "
        >
          <video
            controls
            loop
            muted
            id="iphone-video-player"
            class="video-js vjs-default-skin w-full h-full object-cover bg-red-500"
            style="border-radius: 35px; pointer-events: auto; cursor: pointer;"
            data-setup="{}"
            playsinline
            preload="metadata"
          >
            <source src="https://ebnd.nl/CREATOR.mp4" type="video/mp4" />
            <p class="vjs-no-js">
              To view this video please enable JavaScript, and consider
              upgrading to a web browser that
              <a href="https://videojs.com/html5-video-support/" target="_blank"
                >supports HTML5 video</a
              >.
            </p>
          </video>
        </div>
      </div>
    </div>
  </div>
  <!-- <img class="absolute top-0 right-0 h-96 z-30 rotate-270" src="/svg/particle/rocket.svg" /> -->

  <div
    class="relative flex flex-col gap-4 z-30 text-center lg:text-left order-1 lg:order-2"
  >
    <SectionTitle>
      Het <span class="text-secondary-200">Nutzy</span> Jobplatform
    </SectionTitle>
    <SectionDescription>
      Met 30.000 bezoekers per maand en een conversie van 5% is ons jobplatform
      dé plek waar Gen Z hun eerste baan, stage of traineeship vindt. Hier zien
      ze in één oogopslag dat ze passen bij jouw organisatie.
    </SectionDescription>

    <a
      href="/platform"
      class="lg:px-8 lg:py-4 mx-auto lg:mx-0 px-4 py-2 w-fit bg-tertiary-500 text-black font-bold rounded-lg hover:brightness-105 transition-all duration-300"
    >
      Meer info
    </a>
  </div>
</Section>
<svg
  preserveAspectRatio="none"
  class="animate-wave wave-responsive wave-sm relative -my-6"
  xmlns="http://www.w3.org/2000/svg"
  viewBox="0 0 1440 320"
>
  <rect class=`fill-primary-900` width="1440" height="320" x="0" y="0"></rect>
  <path
    class=`fill-primary-300`
    fill-opacity="1"
    d="M0,64L34.3,69.3C68.6,75,137,85,206,80C274.3,75,343,53,411,58.7C480,64,549,96,617,122.7C685.7,149,754,171,823,186.7C891.4,203,960,213,1029,202.7C1097.1,192,1166,160,1234,128C1302.9,96,1371,64,1406,48L1440,32L1440,320L1405.7,320C1371.4,320,1303,320,1234,320C1165.7,320,1097,320,1029,320C960,320,891,320,823,320C754.3,320,686,320,617,320C548.6,320,480,320,411,320C342.9,320,274,320,206,320C137.1,320,69,320,34,320L0,320Z"
  >
  </path>
</svg>
<Section
  sectionClassName="bg-primary-300"
  className="relative text-center py-8 md:py-16 lg:py-24 gap-8 items-center justify-center grid grid-cols-1 "
>
  <SectionTitle
    class="text-5xl font-bold text-white relative z-50 text-shadow shadow-black"
  >
    Gemakkelijk te integreren via
  </SectionTitle>
  <div class="grid grid-cols-4 items-center justify-center h-24">
    <a
      class="hover:bg-primary-500/5 h-full flex items-center justify-center transition-colors duration-500 hover:inset-shadow-sm"
      target="_blank"
      href="https://www.otys.com/nl/"
    >
      <img class="w-32" src="/companies/logos/otys-logo.svg" />
    </a>
    <a
      class="hover:bg-primary-500/5 h-full flex items-center justify-center transition-colors duration-500 hover:inset-shadow-sm"
      target="_blank"
      href="https://www.serenacms.com/"
    >
      <img class="w-32" src="/companies/logos/serena.svg" />
    </a>
    <a
      class="hover:bg-primary-500/5 h-full flex items-center justify-center transition-colors duration-500 hover:inset-shadow-sm"
      target="_blank"
      href='https://www.brockmeyer.com/nl/"'
    >
      <img
        class="translate-y-2 w-32"
        src="/companies/logos/BM Signature Logo (1).png"
      />
    </a>
    <a
      class="hover:bg-primary-500/5 h-full flex items-center justify-center transition-colors duration-500 hover:inset-shadow-sm"
      target="_blank"
      href="https://www.vonq.com/"
    >
      <img
        class="w-32"
        src="/companies/logos/VONQ_logo_white_small-1-768x328.png"
      />
    </a>
  </div>
</Section>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  const logo = document.getElementById("nutzy-logo-platform");

  gsap.registerPlugin(ScrollTrigger);

  const timeline = gsap.timeline({ paused: true });

  timeline.fromTo(
    logo,
    {
      scale: 0.5,
      x: "100vw",
    },
    {
      scale: 0.7,
      x: "70%",
    },
    0
  );

  ScrollTrigger.create({
    start: "bottom bottom",
    end: "bottom 10%",
    scrub: 1,
    animation: timeline,
  });
</script>

<script>
  import videojs from "video.js";

  document.addEventListener("DOMContentLoaded", function () {
    // Wait a bit to ensure DOM is fully ready
    setTimeout(() => {
      const videoElement = document.getElementById("iphone-video-player");
      const containerElement = document.getElementById(
        "video-container-dimensions"
      );

      if (!videoElement || !containerElement) {
        console.error("Video element or container not found");
        return;
      }

      // Get the actual pixel dimensions of the container for logging
      const containerRect = containerElement.getBoundingClientRect();
      const containerWidth = Math.floor(containerRect.width);
      const containerHeight = Math.floor(containerRect.height);

      console.log(
        "Container dimensions:",
        containerWidth,
        "x",
        containerHeight
      );

      // Initialize Video.js player without explicit dimensions to avoid auto-generated CSS classes
      const player = videojs("iphone-video-player", {
        controls: true, // Show controls
        autoplay: true, // Changed to true
        loop: true,
        muted: true,
        fluid: false, // Disable fluid
        responsive: false, // Disable responsive
        playsinline: true,
        preload: "auto",
        // Don't set width/height here to avoid Video.js generating dimension classes
        sources: [
          {
            src: "https://ebnd.nl/CREATOR.mp4",
            type: "video/mp4",
          },
        ],
      });

      // Ensure video plays automatically with multiple attempts
      player.ready(() => {
        console.log("Video.js player ready");

        // Hide controls initially for iPhone mockup
        player.controls(false);

        // First attempt - immediate play
        player.play().catch((e) => {
          console.log("First autoplay attempt failed:", e);

          // Second attempt - after a short delay
          setTimeout(() => {
            player.play().catch((e2) => {
              console.log("Second autoplay attempt failed:", e2);

              // Third attempt - ensure muted and try again
              player.muted(true);
              player.play().catch((e3) => {
                console.log("All autoplay attempts failed:", e3);
              });
            });
          }, 500);
        });
      });

      // Store playback state globally to track across all events
      let wasPlayingBeforeFullscreen = false;

      // Function to handle fullscreen toggle
      function handleFullscreenToggle(event) {
        console.log("Fullscreen toggle triggered!", event.type, event.target);
        console.log("Is fullscreen:", player.isFullscreen());
        console.log(
          "Clicked on control bar:",
          !!event.target.closest(".vjs-control-bar")
        );

        // Only go fullscreen if not clicking on controls
        if (
          !player.isFullscreen() &&
          !event.target.closest(".vjs-control-bar")
        ) {
          console.log("Attempting to enter fullscreen...");
          // Prevent the event from pausing the video
          event.preventDefault();
          event.stopPropagation();

          // Capture playing state immediately before fullscreen
          wasPlayingBeforeFullscreen = !player.paused();

          // Force video to continue playing if it was playing
          if (wasPlayingBeforeFullscreen) {
            player.play();
          }

          // Request fullscreen
          player
            .requestFullscreen()
            .then(() => {
              console.log("Fullscreen request successful");
            })
            .catch((e) => {
              console.error("Fullscreen request failed:", e);
            });
        } else if (
          player.isFullscreen() &&
          !event.target.closest(".vjs-control-bar")
        ) {
          console.log("Attempting to exit fullscreen...");
          // If in fullscreen and clicking video (not controls), exit fullscreen
          event.preventDefault();
          event.stopPropagation();

          wasPlayingBeforeFullscreen = !player.paused();

          // Force video to continue playing if it was playing
          if (wasPlayingBeforeFullscreen) {
            player.play();
          }

          player.exitFullscreen();
        }
      }

      // Desktop click events
      player.on("click", handleFullscreenToggle);

      // Mobile touch events - Video.js might not handle these properly
      const playerElement = player.el();
      if (playerElement) {
        // Better mobile touch handling with tap detection
        let touchStartTime = 0;
        let touchStartY = 0;
        let touchStartX = 0;

        playerElement.addEventListener(
          "touchstart",
          function (event) {
            touchStartTime = Date.now();
            if (event.touches && event.touches[0]) {
              touchStartY = event.touches[0].clientY;
              touchStartX = event.touches[0].clientX;
            }
          },
          { passive: true }
        );

        playerElement.addEventListener(
          "touchend",
          function (event) {
            const touchDuration = Date.now() - touchStartTime;
            let touchEndY = 0;
            let touchEndX = 0;

            if (event.changedTouches && event.changedTouches[0]) {
              touchEndY = event.changedTouches[0].clientY;
              touchEndX = event.changedTouches[0].clientX;
            }

            // Calculate movement distance
            const moveY = Math.abs(touchEndY - touchStartY);
            const moveX = Math.abs(touchEndX - touchStartX);
            const totalMove = Math.sqrt(moveX * moveX + moveY * moveY);

            // Only trigger on quick taps with minimal movement (not swipes or long presses)
            if (touchDuration < 300 && totalMove < 10) {
              console.log("Quick tap detected on mobile");
              event.preventDefault();
              handleFullscreenToggle(event);
            }
          },
          { passive: false }
        );
      }

      // Handle fullscreen events with better playback preservation
      player.on("fullscreenchange", function () {
        if (player.isFullscreen()) {
          // Entering fullscreen - unmute
          player.muted(false);
          player.controls(true);
          player.volume(0.8);
          player
            .play()
            .catch((e) => console.log("Play in fullscreen failed:", e));
        } else {
          player.controls(false);

          // Exiting fullscreen - mute
          player.muted(true);

          // Ensure video continues playing if it was playing before
          if (wasPlayingBeforeFullscreen) {
            setTimeout(() => {
              player
                .play()
                .catch((e) =>
                  console.log("Play after exit fullscreen failed:", e)
                );
            }, 200);
          }
        }
      });

      // Additional safety: prevent pause on click events
      player.on("pause", function (event) {
        // If video was paused due to fullscreen transition, resume it
        if (
          wasPlayingBeforeFullscreen &&
          (player.isFullscreen() || document.fullscreenElement)
        ) {
          setTimeout(() => {
            player
              .play()
              .catch((e) => console.log("Resume after pause failed:", e));
          }, 100);
        }
      });

      // Video dimensions are now controlled by CSS, no need for resize handler

      // Handle cleanup
      window.addEventListener("beforeunload", () => {
        if (player) {
          player.dispose();
        }
      });
    }, 100); // Close setTimeout
  }); // Close DOMContentLoaded
</script>

<style>
  /* iPhone Mockup Container - Safari Compatible */
  .iphone-mockup-container {
    /* Ensure proper stacking context */
    isolation: isolate;
  }

  /* iPhone Screen Container - Precise video containment */
  .iphone-screen-container {
    /* Ensure video is perfectly contained within iPhone screen boundaries */
    position: absolute;
    overflow: hidden;
    /* Use CSS mask for perfect screen shape matching - Safari compatible */
    -webkit-mask: radial-gradient(
      ellipse at center,
      black 99%,
      transparent 100%
    );
    mask: radial-gradient(ellipse at center, black 99%, transparent 100%);
    /* Additional containment for video overflow */
    contain: layout style paint;
    /* Safari-specific fixes */
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
  }

  .iphone-screen-container video {
    /* Ensure video respects container boundaries */
    max-width: 100%;
    max-height: 100%;
    object-fit: cover;
    object-position: center;
    /* Prevent any potential overflow - Safari specific */
    transform: scale(0.999); /* Slight scale down to ensure no edge overflow */
    -webkit-transform: scale(0.999);
    /* Force hardware acceleration on Safari */
    -webkit-transform: translateZ(0) scale(0.999);
    will-change: transform;
  }

  /* Ensure proper stacking and containment */
  [data-screen-content] {
    /* Create a new stacking context */
    isolation: isolate;
    /* Ensure content doesn't overflow iPhone frame */
    overflow: hidden;
    /* Safari-specific containment */
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
  }

  /* Custom Video.js styling for iPhone mockup */
  #iphone-video-player {
    border-radius: 35px !important;
    /* Safari-specific video fixes */
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    /* Force container dimensions to match iPhone screen */
    width: 100% !important;
    height: 100% !important;
    max-width: 100% !important;
    max-height: 100% !important;
    min-width: 100% !important;
    min-height: 100% !important;
  }

  /* Override Video.js auto-generated dimension classes */
  .iphone-video-player-dimensions {
    width: 100% !important;
    height: 100% !important;
    max-width: 100% !important;
    max-height: 100% !important;
  }

  /* Style the big play button to be smaller and more subtle */
  #iphone-video-player .vjs-big-play-button {
    width: 60px !important;
    height: 60px !important;
    border-radius: 50% !important;
    background-color: rgba(0, 0, 0, 0.6) !important;
    border: 2px solid rgba(255, 255, 255, 0.8) !important;
    font-size: 20px !important;
    line-height: 56px !important;
    top: 50% !important;
    left: 50% !important;
    transform: translate(-50%, -50%) !important;
    -webkit-transform: translate(-50%, -50%) !important;
  }

  /* Style the control bar to fit the iPhone mockup */
  #iphone-video-player .vjs-control-bar {
    background: linear-gradient(
      to top,
      rgba(0, 0, 0, 0.8),
      transparent
    ) !important;
    border-radius: 0 0 35px 35px !important;
    height: 50px !important;
    padding: 0 15px !important;
  }

  /* Style control buttons */
  #iphone-video-player .vjs-control-bar .vjs-button {
    color: white !important;
  }

  /* Style progress bar */
  #iphone-video-player .vjs-progress-control {
    height: 6px !important;
  }

  #iphone-video-player .vjs-progress-holder {
    height: 6px !important;
    border-radius: 3px !important;
  }

  /* Ensure video fills the container with Safari fixes */
  #iphone-video-player .vjs-tech {
    object-fit: cover !important;
    border-radius: 35px !important;
    /* Safari-specific fixes */
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
  }

  /* Remove Video.js default styling that might interfere */
  #iphone-video-player.video-js {
    background-color: transparent !important;
    border-radius: 35px !important;
    /* Safari containment fixes */
    -webkit-transform: translateZ(0);
    transform: translateZ(0);
    overflow: hidden !important;
  }

  /* Fullscreen centering styles */
  #iphone-video-player.vjs-fullscreen {
    width: 100vw !important;
    height: 100vh !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    background-color: black !important;
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    z-index: 9999 !important;
    /* Reset transforms in fullscreen */
    -webkit-transform: none !important;
    transform: none !important;
  }

  #iphone-video-player.vjs-fullscreen .vjs-tech {
    width: auto !important;
    height: 100vh !important;
    max-width: 100vw !important;
    object-fit: contain !important;
    border-radius: 0 !important;
    position: relative !important;
    top: auto !important;
    left: auto !important;
    transform: none !important;
    -webkit-transform: none !important;
    margin: 0 !important;
  }

  /* Accessibility: Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .iphone-screen-container video {
      animation: none !important;
      transform: scale(0.999) !important;
      -webkit-transform: scale(0.999) !important;
    }

    #iphone-video-player .vjs-big-play-button {
      transition: none !important;
    }
  }
</style>
