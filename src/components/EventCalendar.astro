---
// Sample event data for the calendar
const currentDate = new Date();
const currentMonth = currentDate.getMonth();
const currentYear = currentDate.getFullYear();

// Get the first day of the month and number of days
const firstDayOfMonth = new Date(currentYear, currentMonth, 1);
const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);
const daysInMonth = lastDayOfMonth.getDate();
const startingDayOfWeek = firstDayOfMonth.getDay();

// Month names
const monthNames = [
  "Januari",
  "Februari",
  "Maart",
  "April",
  "Mei",
  "Juni",
  "Juli",
  "Augustus",
  "September",
  "Oktober",
  "November",
  "December",
];

// Day names
const dayNames = ["Zo", "Ma", "Di", "Wo", "Do", "Vr", "Za"];

// Sample events data
const events = [
  { date: 5, title: "Gen Z Workshop", type: "workshop", time: "14:00" },
  { date: 12, title: "Recruitment Trends", type: "webinar", time: "10:00" },
  {
    date: 18,
    title: "Creator Network Event",
    type: "networking",
    time: "16:30",
  },
  { date: 25, title: "Digital Marketing", type: "workshop", time: "13:00" },
  { date: 28, title: "Q&A Session", type: "qa", time: "15:00" },
];

// Create calendar grid
const calendarDays = [];
// Add empty cells for days before the first day of the month
for (let i = 0; i < startingDayOfWeek; i++) {
  calendarDays.push(null);
}
// Add all days of the month
for (let day = 1; day <= daysInMonth; day++) {
  calendarDays.push(day);
}

// Get events for a specific day
function getEventsForDay(day: number) {
  return events.filter((event) => event.date === day);
}

// Get event type color using approved palette
function getEventTypeColor(type: string) {
  switch (type) {
    case "workshop":
      return "bg-primary-500"; // Primary brand color
    case "webinar":
      return "bg-primary-900";
    case "networking":
      return "bg-secondary-900";
    case "qa":
      return "bg-secondary-200";
    default:
      return "bg-primary-200";
  }
}

// Get upcoming events (next 3 events from today)
const today = currentDate.getDate();
const upcomingEvents = events
  .filter((event) => event.date >= today)
  .sort((a, b) => a.date - b.date)
  .slice(0, 3);
---

<!-- Horizontal Layout: Datepicker on left, Events on right -->
<div
  class="bg-white rounded-2xl shadow-2xl border border-gray-100 w-full max-w-4xl mx-auto overflow-hidden"
>
  <div class="grid grid-cols-1 lg:grid-cols-2 min-h-[400px]">
    <!-- Left Side: Calendar/Datepicker -->
    <div class="p-4 md:p-6 border-b lg:border-b-0 lg:border-r border-gray-200">
      <!-- Calendar Header -->
      <div class="flex items-center justify-between mb-4 md:mb-6">
        <h2 class="text-xl md:text-2xl font-bold text-gray-900 font-anton">
          {monthNames[currentMonth]}
          {currentYear}
        </h2>
        <div class="flex gap-1 md:gap-2">
          <button
            class="p-1.5 md:p-2 hover:bg-gray-100 rounded-lg transition-colors vsk-focus-ring"
            aria-label="Vorige maand"
          >
            <svg
              class="w-4 h-4 md:w-5 md:h-5 text-gray-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
          <button
            class="p-1.5 md:p-2 hover:bg-gray-100 rounded-lg transition-colors vsk-focus-ring"
            aria-label="Volgende maand"
          >
            <svg
              class="w-4 h-4 md:w-5 md:h-5 text-gray-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
      </div>

      <!-- Day Headers -->
      <div class="grid grid-cols-7 gap-1 mb-2">
        {
          dayNames.map((day) => (
            <div class="text-center text-xs md:text-sm font-semibold text-gray-500 py-1 md:py-2">
              {day}
            </div>
          ))
        }
      </div>

      <!-- Calendar Grid -->
      <div class="grid grid-cols-7 gap-1">
        {
          calendarDays.map((day) => {
            if (day === null) {
              return <div class="h-8 md:h-10" />;
            }

            const dayEvents = getEventsForDay(day);
            const isToday =
              day === currentDate.getDate() &&
              currentMonth === currentDate.getMonth() &&
              currentYear === currentDate.getFullYear();

            return (
              <div
                class={`relative h-8 md:h-10 p-1 rounded-lg hover:bg-gray-50 transition-colors cursor-pointer ${
                  isToday ? "bg-purple-100 ring-2 ring-purple-600" : ""
                }`}
              >
                <div
                  class={`text-xs md:text-sm font-medium ${
                    isToday ? "text-purple-700" : "text-gray-900"
                  }`}
                >
                  {day}
                </div>

                {/* Event indicators */}
                {dayEvents.length > 0 && (
                  <div class="absolute bottom-0.5 left-1 right-1 flex gap-0.5 justify-center">
                    {dayEvents.slice(0, 2).map((event) => (
                      <div
                        class={`w-1 h-1 rounded-full ${getEventTypeColor(event.type)}`}
                        title={event.title}
                      />
                    ))}
                    {dayEvents.length > 2 && (
                      <div
                        class="w-1 h-1 rounded-full bg-gray-400"
                        title={`+${dayEvents.length - 2} meer`}
                      />
                    )}
                  </div>
                )}
              </div>
            );
          })
        }
      </div>
    </div>

    <!-- Right Side: Current Events -->
    <div class="p-4 md:p-6 bg-gray-50">
      <h3 class="text-xl md:text-2xl font-bold text-gray-900 mb-6 font-anton">
        Aankomende Events
      </h3>

      <!-- Events List -->
      <div class="space-y-4">
        {
          upcomingEvents.map((event) => (
            <div class="bg-white p-4 rounded-xl shadow-sm hover:shadow-md transition-shadow border border-gray-100">
              <div class="flex items-start gap-4">
                <div class="flex-shrink-0">
                  <div
                    class={`w-4 h-4 rounded-full ${getEventTypeColor(event.type)}`}
                  />
                </div>
                <div class="flex-1 min-w-0">
                  <h4 class="font-semibold text-gray-900 mb-1">
                    {event.title}
                  </h4>
                  <div class="flex items-center gap-4 text-sm text-gray-600">
                    <div class="flex items-center gap-1">
                      <svg
                        class="w-4 h-4"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                        />
                      </svg>
                      <span>
                        {event.date} {monthNames[currentMonth]}
                      </span>
                    </div>
                    <div class="flex items-center gap-1">
                      <svg
                        class="w-4 h-4"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                      <span>{event.time}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))
        }
      </div>

      <!-- View All Events Button -->
      <button
        class="w-full bg-tertiary-900 mt-6 px-4 py-3 text-black font-semibold rounded-xl transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 vsk-focus-ring hover:opacity-90 hover:transform "
      >
        Bekijk alle events
      </button>
    </div>
  </div>
</div>

<style>
  /* Accessibility improvements */
  @media (prefers-reduced-motion: reduce) {
    * {
      transition: none !important;
      transform: none !important;
    }
  }

  /* Focus styles for keyboard navigation */
  button:focus {
    outline: 2px solid #412683;
    outline-offset: 2px;
  }

  /* Mobile responsive adjustments */
  @media (max-width: 1024px) {
    .grid-cols-2 {
      grid-template-rows: auto auto;
    }
  }

  @media (max-width: 640px) {
    .calendar-grid {
      gap: 0.25rem;
    }
  }
</style>
