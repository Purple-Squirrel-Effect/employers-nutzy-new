---
import Header from "../components/Header.astro";
import "../styles/global.css";
---
    <canvas class="fixed h-screen w-screen" id="particleCanvas"></canvas>

<Header />
<slot />
  <script>
        // Get the canvas element and its 2D rendering context
        const canvas = document.getElementById('particleCanvas');
        const ctx = canvas.getContext('2d');

        // Array to hold all active particles
        const particles = [];

        // Define the types of particles with their emojis and base sizes
        const particleTypes = [
            { emoji: '🐿️', size: 30 }, // Squirrel
            { emoji: '🌰', size: 25 }, // Acorn
            { emoji: '🥜', size: 20 }, // Peanut
            { emoji: '🌳', size: 28 }  // Tree leaf/nut for variety
        ];

        /**
         * Particle class represents a single particle in the simulation.
         */
        class Particle {
            constructor(x, y, type) {
                this.x = x; // X position
                this.y = y; // Y position
                this.vx = (Math.random() - 0.5) * 0.5; // Horizontal velocity (slight drift)
                this.vy = 1 + Math.random() * 1.5; // Vertical velocity (falling speed)
                this.type = type; // The type object (emoji, size)
                this.size = type.size + (Math.random() * 10 - 5); // Slightly vary size
                this.opacity = 1; // Initial opacity
                this.rotation = Math.random() * Math.PI * 2; // Initial rotation
                this.rotationSpeed = (Math.random() - 0.5) * 0.05; // Rotation speed
            }

            /**
             * Updates the particle's position and opacity.
             */
            update() {
                this.x += this.vx;
                this.y += this.vy;
                this.rotation += this.rotationSpeed;

                // Gradually fade out particles as they approach the bottom
                if (this.y > canvas.height * 0.8) {
                    this.opacity -= 0.005; // Adjust fade speed
                }
            }

            /**
             * Draws the particle on the canvas.
             */
            draw() {
                ctx.save(); // Save the current canvas state
                ctx.translate(this.x, this.y); // Move origin to particle's position
                ctx.rotate(this.rotation); // Apply rotation
                ctx.globalAlpha = this.opacity; // Apply opacity

                ctx.font = `${this.size}px Arial`; // Set font size for emoji
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText(this.type.emoji, 0, 0); // Draw the emoji at the origin (0,0)

                ctx.restore(); // Restore the canvas state
            }
        }

        /**
         * Resizes the canvas to fill the window.
         */
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }

        /**
         * Generates a new particle at a random position at the top of the canvas.
         */
        function createParticle() {
            const x = Math.random() * canvas.width;
            const type = particleTypes[Math.floor(Math.random() * particleTypes.length)];
            particles.push(new Particle(x, -50, type)); // Start slightly above the top
        }

        /**
         * The main animation loop.
         */
        function animate() {
            // Clear the entire canvas for each frame
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Update and draw each particle
            for (let i = particles.length - 1; i >= 0; i--) {
                const particle = particles[i];
                particle.update();
                particle.draw();

                // Remove particles that are off-screen or fully faded
                if (particle.y > canvas.height + 50 || particle.opacity <= 0) {
                    particles.splice(i, 1);
                }
            }

            // Periodically create new particles
            if (Math.random() < 0.02) { // Adjust this value to control particle density
                createParticle();
            }

            // Request the next animation frame
            requestAnimationFrame(animate);
        }

        // Initialize the canvas size on load
        window.onload = function() {
            resizeCanvas();
            // Start the animation loop
            animate();
        };

        // Resize canvas whenever the window is resized
        window.addEventListener('resize', resizeCanvas);
    </script>