---
import App from "../layouts/App.astro";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Fire Animation Demo - Nutzy</title>
    <meta
      name="description"
      content="GSAP morphing fire animation demonstration using particle-2.svg"
    />
  </head>
  <body>
    <App>
      <section class="min-h-screen bg-black flex items-center justify-center relative overflow-hidden">
        <!-- Background gradient for fire glow effect -->
        <div class="absolute inset-0 bg-gradient-radial from-orange-900/30 via-red-900/20 to-black"></div>
        
        <!-- Fire container -->
        <div class="relative z-10 flex flex-col items-center space-y-8">
        
          
          <!-- Fire SVG Container -->
          <div class="relative" data-fire-container>
            <!-- Main Fire SVG - will be converted to inline SVG for morphing -->
            <svg 
              id="fire-svg" 
              width="176" 
              height="176" 
              viewBox="0 0 176 176" 
              fill="none" 
              xmlns="http://www.w3.org/2000/svg" 
              class="w-screen h-screen drop-shadow-2xl"
              data-fire-main
            >
              <!-- Fire mask path - this will be morphed -->
              <mask id="fire-mask" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="19" y="0" width="137" height="176">
                <path 
                  id="fire-path" 
                  d="M155.76 119.581C155.76 147.217 132.489 170.299 101.531 175.722C127.736 162.512 128.149 140.612 112.567 121.111C102.357 108.318 89.4201 98.2722 98.1414 82.7336C76.5654 95.1088 81.2361 110.196 85.3694 122.154C89.3374 133.625 64.2068 134.703 71.3988 114.68C48.5828 131.748 54.7001 162.269 75.3254 176C43.4988 171.133 19.3601 147.739 19.3601 119.581C19.3601 118.121 19.4014 116.661 19.4428 115.236C24.1961 122.64 31.2641 130.323 41.5561 134.668C-5.4399 93.3707 46.8054 58.8173 41.3494 40.7063C67.3894 62.0154 33.2894 84.1936 64.3721 98.9674C50.3601 36.9868 113.765 49.6054 99.0508 7.99526C137.821 38.2034 99.8361 53.5682 119.511 83.394C120.503 73.765 124.967 58.6087 135.507 53.0816C131.704 64.5878 137.325 74.7383 141.459 81.1693C149.643 93.9269 155.76 105.016 155.76 119.581ZM82.5174 0C88.5934 20.892 54.0801 27.1491 62.2228 50.0573C67.8854 35.1096 108.351 25.411 82.5174 0Z" 
                  fill="white"
                />
              </mask>
              
              <!-- Fire gradient effects -->
              <g mask="url(#fire-mask)">
                <!-- Animated gradient ellipses for fire effect -->
                <g filter="url(#fire-glow-1)" data-fire-layer="1">
                  <ellipse cx="121.44" cy="94.5998" rx="78.32" ry="78.76" fill="#FF6B35" opacity="0.8"/>
                </g>
                <g filter="url(#fire-glow-2)" data-fire-layer="2">
                  <ellipse cx="77.4401" cy="3.9602" rx="78.32" ry="78.76" fill="#FF8E53" opacity="0.7"/>
                </g>
                <g filter="url(#fire-glow-3)" data-fire-layer="3">
                  <ellipse cx="23.7599" cy="77.0002" rx="78.32" ry="78.76" fill="#FFB84D" opacity="0.6"/>
                </g>
                <g filter="url(#fire-glow-4)" data-fire-layer="4">
                  <ellipse cx="67.7599" cy="181.72" rx="78.32" ry="78.76" fill="#FFC947" opacity="0.5"/>
                </g>
                
                <!-- Fire texture overlay -->
                <g style="mix-blend-mode:overlay" opacity="0.4" data-fire-texture>
                  <rect width="176" height="176" fill="url(#fire-pattern)"/>
                </g>
              </g>
              
              <!-- SVG Filters for glow effects -->
              <defs>
                <filter id="fire-glow-1" x="-20" y="-20" width="320" height="320" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                  <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                  <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
                  <feGaussianBlur stdDeviation="15" result="effect1_foregroundBlur"/>
                </filter>
                <filter id="fire-glow-2" x="-20" y="-20" width="320" height="320" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                  <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                  <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
                  <feGaussianBlur stdDeviation="20" result="effect1_foregroundBlur"/>
                </filter>
                <filter id="fire-glow-3" x="-20" y="-20" width="320" height="320" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                  <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                  <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
                  <feGaussianBlur stdDeviation="25" result="effect1_foregroundBlur"/>
                </filter>
                <filter id="fire-glow-4" x="-20" y="-20" width="320" height="320" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                  <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                  <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
                  <feGaussianBlur stdDeviation="30" result="effect1_foregroundBlur"/>
                </filter>
                
                <!-- Fire pattern for texture -->
                <pattern id="fire-pattern" patternContentUnits="objectBoundingBox" width="1" height="1">
                  <rect width="1" height="1" fill="url(#fire-gradient)"/>
                </pattern>
                
                <!-- Fire gradient -->
                <linearGradient id="fire-gradient" x1="0%" y1="100%" x2="0%" y2="0%">
                  <stop offset="0%" style="stop-color:#FF4500;stop-opacity:1" />
                  <stop offset="30%" style="stop-color:#FF6347;stop-opacity:0.8" />
                  <stop offset="60%" style="stop-color:#FFA500;stop-opacity:0.6" />
                  <stop offset="100%" style="stop-color:#FFD700;stop-opacity:0.4" />
                </linearGradient>
              </defs>
            </svg>
            
            <!-- Particle effects around the fire -->
            <div class="absolute inset-0 pointer-events-none" data-particles-container>
              <!-- Spark particles will be generated here -->
            </div>
          </div>
          
          <!-- Controls -->
          <div class="flex space-x-4 mt-8">
            <button 
              id="toggle-animation" 
              class="px-6 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors duration-200"
            >
              Pause Animation
            </button>
            <button 
              id="reset-animation" 
              class="px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors duration-200"
            >
              Reset
            </button>
          </div>
        </div>
      </section>
    </App>
  </body>
</html>

<script>
  import { gsap } from "gsap";

  // Note: Using alternative animation techniques instead of MorphSVG plugin
  // to ensure compatibility without premium GSAP license

  interface FireAnimationState {
    mainTimeline: gsap.core.Timeline | null;
    particleTimeline: gsap.core.Timeline | null;
    isPlaying: boolean;
    particles: HTMLElement[];
    fireVariations: string[];
    currentVariation: number;
  }

  // Fire path variations for morphing animation
  const fireVariations = [
    // Original fire shape
    "M155.76 119.581C155.76 147.217 132.489 170.299 101.531 175.722C127.736 162.512 128.149 140.612 112.567 121.111C102.357 108.318 89.4201 98.2722 98.1414 82.7336C76.5654 95.1088 81.2361 110.196 85.3694 122.154C89.3374 133.625 64.2068 134.703 71.3988 114.68C48.5828 131.748 54.7001 162.269 75.3254 176C43.4988 171.133 19.3601 147.739 19.3601 119.581C19.3601 118.121 19.4014 116.661 19.4428 115.236C24.1961 122.64 31.2641 130.323 41.5561 134.668C-5.4399 93.3707 46.8054 58.8173 41.3494 40.7063C67.3894 62.0154 33.2894 84.1936 64.3721 98.9674C50.3601 36.9868 113.765 49.6054 99.0508 7.99526C137.821 38.2034 99.8361 53.5682 119.511 83.394C120.503 73.765 124.967 58.6087 135.507 53.0816C131.704 64.5878 137.325 74.7383 141.459 81.1693C149.643 93.9269 155.76 105.016 155.76 119.581ZM82.5174 0C88.5934 20.892 54.0801 27.1491 62.2228 50.0573C67.8854 35.1096 108.351 25.411 82.5174 0Z",

    // Variation 1 - Taller flames, more flickering
    "M155.76 115.581C155.76 143.217 132.489 166.299 101.531 171.722C127.736 158.512 128.149 136.612 112.567 117.111C102.357 104.318 89.4201 94.2722 98.1414 78.7336C76.5654 91.1088 81.2361 106.196 85.3694 118.154C89.3374 129.625 64.2068 130.703 71.3988 110.68C48.5828 127.748 54.7001 158.269 75.3254 172C43.4988 167.133 19.3601 143.739 19.3601 115.581C19.3601 114.121 19.4014 112.661 19.4428 111.236C24.1961 118.64 31.2641 126.323 41.5561 130.668C-5.4399 89.3707 46.8054 54.8173 41.3494 36.7063C67.3894 58.0154 33.2894 80.1936 64.3721 94.9674C50.3601 32.9868 113.765 45.6054 99.0508 3.99526C137.821 34.2034 99.8361 49.5682 119.511 79.394C120.503 69.765 124.967 54.6087 135.507 49.0816C131.704 60.5878 137.325 70.7383 141.459 77.1693C149.643 89.9269 155.76 101.016 155.76 115.581ZM82.5174 -4C88.5934 16.892 54.0801 23.1491 62.2228 46.0573C67.8854 31.1096 108.351 21.411 82.5174 -4Z",

    // Variation 2 - Wider base, dancing flames
    "M160.76 119.581C160.76 147.217 137.489 170.299 106.531 175.722C132.736 162.512 133.149 140.612 117.567 121.111C107.357 108.318 94.4201 98.2722 103.1414 82.7336C81.5654 95.1088 86.2361 110.196 90.3694 122.154C94.3374 133.625 69.2068 134.703 76.3988 114.68C53.5828 131.748 59.7001 162.269 80.3254 176C48.4988 171.133 24.3601 147.739 24.3601 119.581C24.3601 118.121 24.4014 116.661 24.4428 115.236C29.1961 122.64 36.2641 130.323 46.5561 134.668C-0.4399 93.3707 51.8054 58.8173 46.3494 40.7063C72.3894 62.0154 38.2894 84.1936 69.3721 98.9674C55.3601 36.9868 118.765 49.6054 104.0508 7.99526C142.821 38.2034 104.8361 53.5682 124.511 83.394C125.503 73.765 129.967 58.6087 140.507 53.0816C136.704 64.5878 142.325 74.7383 146.459 81.1693C154.643 93.9269 160.76 105.016 160.76 119.581ZM87.5174 0C93.5934 20.892 59.0801 27.1491 67.2228 50.0573C72.8854 35.1096 113.351 25.411 87.5174 0Z",

    // Variation 3 - Leaning flames, wind effect
    "M150.76 119.581C150.76 147.217 127.489 170.299 96.531 175.722C122.736 162.512 123.149 140.612 107.567 121.111C97.357 108.318 84.4201 98.2722 93.1414 82.7336C71.5654 95.1088 76.2361 110.196 80.3694 122.154C84.3374 133.625 59.2068 134.703 66.3988 114.68C43.5828 131.748 49.7001 162.269 70.3254 176C38.4988 171.133 14.3601 147.739 14.3601 119.581C14.3601 118.121 14.4014 116.661 14.4428 115.236C19.1961 122.64 26.2641 130.323 36.5561 134.668C-10.4399 93.3707 41.8054 58.8173 36.3494 40.7063C62.3894 62.0154 28.2894 84.1936 59.3721 98.9674C45.3601 36.9868 108.765 49.6054 94.0508 7.99526C132.821 38.2034 94.8361 53.5682 114.511 83.394C115.503 73.765 119.967 58.6087 130.507 53.0816C126.704 64.5878 132.325 74.7383 136.459 81.1693C144.643 93.9269 150.76 105.016 150.76 119.581ZM77.5174 0C83.5934 20.892 49.0801 27.1491 57.2228 50.0573C62.8854 35.1096 103.351 25.411 77.5174 0Z",

    // Variation 4 - Intense flames, higher peaks
    "M158.76 112.581C158.76 140.217 135.489 163.299 104.531 168.722C130.736 155.512 131.149 133.612 115.567 114.111C105.357 101.318 92.4201 91.2722 101.1414 75.7336C79.5654 88.1088 84.2361 103.196 88.3694 115.154C92.3374 126.625 67.2068 127.703 74.3988 107.68C51.5828 124.748 57.7001 155.269 78.3254 169C46.4988 164.133 22.3601 140.739 22.3601 112.581C22.3601 111.121 22.4014 109.661 22.4428 108.236C27.1961 115.64 34.2641 123.323 44.5561 127.668C-2.4399 86.3707 49.8054 51.8173 44.3494 33.7063C70.3894 55.0154 36.2894 77.1936 67.3721 91.9674C53.3601 29.9868 116.765 42.6054 102.0508 0.99526C140.821 31.2034 102.8361 46.5682 122.511 76.394C123.503 66.765 127.967 51.6087 138.507 46.0816C134.704 57.5878 140.325 67.7383 144.459 74.1693C152.643 86.9269 158.76 98.016 158.76 112.581ZM85.5174 -3C91.5934 17.892 57.0801 24.1491 65.2228 47.0573C70.8854 32.1096 111.351 22.411 85.5174 -3Z"
  ];

  const animationState: FireAnimationState = {
    mainTimeline: null,
    particleTimeline: null,
    isPlaying: true,
    particles: [],
    fireVariations,
    currentVariation: 0
  };

  document.addEventListener("DOMContentLoaded", () => {
    // Check for reduced motion preference
    const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches;

    if (prefersReducedMotion) {
      console.log("Reduced motion detected, showing static fire");
      showStaticFire();
      return;
    }

    initFireAnimation();
    setupControls();
  });

  function showStaticFire(): void {
    const fireContainer = document.querySelector("[data-fire-container]") as HTMLElement;
    if (fireContainer) {
      gsap.set(fireContainer, { opacity: 1 });
      // Add a subtle glow effect for static version
      gsap.to(fireContainer, {
        filter: "drop-shadow(0 0 20px rgba(255, 107, 53, 0.5))",
        duration: 2,
        repeat: -1,
        yoyo: true,
        ease: "power2.inOut"
      });
    }
  }

  function initFireAnimation(): void {
    createFireMorphingAnimation();
    createFireLayerAnimations();
    createParticleEffects();
    startAnimation();
  }

  function createFireMorphingAnimation(): void {
    const firePath = document.getElementById("fire-path");
    const fireContainer = document.querySelector("[data-fire-container]") as HTMLElement;
    if (!firePath || !fireContainer) return;

    // Create alternative fire animation using transforms and filters
    const morphTimeline = gsap.timeline({ repeat: -1 });

    // Animate fire shape using scale, skew, and rotation for flame-like movement
    morphTimeline
      // Phase 1: Tall flame
      .to(firePath, {
        scaleY: 1.1,
        scaleX: 0.95,
        transformOrigin: "50% 100%",
        duration: 0.8,
        ease: "power2.inOut"
      })
      .to(fireContainer, {
        skewX: 2,
        duration: 0.8,
        ease: "power2.inOut"
      }, "<")

      // Phase 2: Wide flame
      .to(firePath, {
        scaleY: 0.9,
        scaleX: 1.15,
        duration: 0.6,
        ease: "power2.inOut"
      })
      .to(fireContainer, {
        skewX: -3,
        duration: 0.6,
        ease: "power2.inOut"
      }, "<")

      // Phase 3: Leaning flame (wind effect)
      .to(firePath, {
        scaleY: 1.05,
        scaleX: 0.98,
        rotation: -2,
        duration: 0.7,
        ease: "power2.inOut"
      })
      .to(fireContainer, {
        skewX: 1,
        duration: 0.7,
        ease: "power2.inOut"
      }, "<")

      // Phase 4: Intense flame
      .to(firePath, {
        scaleY: 1.2,
        scaleX: 0.9,
        rotation: 1,
        duration: 0.5,
        ease: "power2.inOut"
      })
      .to(fireContainer, {
        skewX: -1,
        duration: 0.5,
        ease: "power2.inOut"
      }, "<")

      // Return to original
      .to(firePath, {
        scaleY: 1,
        scaleX: 1,
        rotation: 0,
        duration: 0.6,
        ease: "power2.inOut"
      })
      .to(fireContainer, {
        skewX: 0,
        duration: 0.6,
        ease: "power2.inOut"
      }, "<");

    animationState.mainTimeline = morphTimeline;
  }

  function createFireLayerAnimations(): void {
    // Animate the fire gradient layers for realistic fire movement
    const layers = document.querySelectorAll("[data-fire-layer]");

    layers.forEach((layer, index) => {
      const ellipse = layer.querySelector("ellipse");
      if (!ellipse) return;

      // Create individual timeline for each layer
      const layerTimeline = gsap.timeline({ repeat: -1 });

      // Animate position and size for flickering effect
      layerTimeline
        .to(ellipse, {
          attr: {
            cy: `+=${5 + index * 2}`,
            rx: `+=${2 + index}`,
            ry: `+=${3 + index}`
          },
          duration: 0.5 + index * 0.1,
          ease: "power2.inOut"
        })
        .to(ellipse, {
          attr: {
            cy: `-=${8 + index * 3}`,
            rx: `-=${1 + index * 0.5}`,
            ry: `-=${2 + index * 0.5}`
          },
          duration: 0.4 + index * 0.1,
          ease: "power2.inOut"
        })
        .to(ellipse, {
          attr: {
            cy: `+=${3 + index}`,
            rx: `+=${1}`,
            ry: `+=${1}`
          },
          duration: 0.3 + index * 0.1,
          ease: "power2.inOut"
        });

      // Add opacity flickering
      gsap.to(layer, {
        opacity: `+=${0.1 + index * 0.05}`,
        duration: 0.2 + index * 0.1,
        repeat: -1,
        yoyo: true,
        ease: "power2.inOut"
      });
    });

    // Animate the fire texture overlay
    const fireTexture = document.querySelector("[data-fire-texture]");
    if (fireTexture) {
      gsap.to(fireTexture, {
        opacity: 0.6,
        duration: 1.2,
        repeat: -1,
        yoyo: true,
        ease: "power2.inOut"
      });
    }
  }

  function createParticleEffects(): void {
    const particlesContainer = document.querySelector("[data-particles-container]") as HTMLElement;
    if (!particlesContainer) return;

    // Create spark particles
    for (let i = 0; i < 15; i++) {
      createSparkParticle(particlesContainer, i);
    }

    // Create floating ember particles
    for (let i = 0; i < 8; i++) {
      createEmberParticle(particlesContainer, i);
    }
  }

  function createSparkParticle(container: HTMLElement, index: number): void {
    const spark = document.createElement("div");
    spark.className = "absolute w-1 h-1 bg-yellow-400 rounded-full opacity-80";
    spark.style.boxShadow = "0 0 4px rgba(255, 215, 0, 0.8)";
    container.appendChild(spark);

    // Random starting position around the fire
    const startX = 50 + (Math.random() - 0.5) * 60; // Center around fire
    const startY = 80 + Math.random() * 20; // Bottom area of fire

    gsap.set(spark, {
      left: `${startX}%`,
      top: `${startY}%`,
      scale: 0
    });

    // Animate spark lifecycle
    const sparkTimeline = gsap.timeline({ repeat: -1, delay: index * 0.2 });

    sparkTimeline
      .to(spark, {
        scale: 1,
        duration: 0.1,
        ease: "power2.out"
      })
      .to(spark, {
        x: (Math.random() - 0.5) * 100,
        y: -50 - Math.random() * 50,
        scale: 0,
        opacity: 0,
        duration: 1.5 + Math.random() * 1,
        ease: "power2.out"
      })
      .set(spark, {
        x: 0,
        y: 0,
        opacity: 0.8,
        delay: Math.random() * 2
      });

    animationState.particles.push(spark);
  }

  function createEmberParticle(container: HTMLElement, index: number): void {
    const ember = document.createElement("div");
    ember.className = "absolute w-2 h-2 bg-orange-500 rounded-full opacity-60";
    ember.style.boxShadow = "0 0 6px rgba(255, 107, 53, 0.6)";
    container.appendChild(ember);

    // Random starting position
    const startX = 40 + Math.random() * 20;
    const startY = 70 + Math.random() * 30;

    gsap.set(ember, {
      left: `${startX}%`,
      top: `${startY}%`,
      scale: 0
    });

    // Animate ember floating upward
    const emberTimeline = gsap.timeline({ repeat: -1, delay: index * 0.5 });

    emberTimeline
      .to(ember, {
        scale: 1,
        duration: 0.3,
        ease: "power2.out"
      })
      .to(ember, {
        x: (Math.random() - 0.5) * 40,
        y: -80 - Math.random() * 40,
        scale: 0.3,
        opacity: 0,
        rotation: Math.random() * 360,
        duration: 3 + Math.random() * 2,
        ease: "power1.out"
      })
      .set(ember, {
        x: 0,
        y: 0,
        opacity: 0.6,
        rotation: 0,
        delay: Math.random() * 3
      });

    animationState.particles.push(ember);
  }

  function startAnimation(): void {
    // Add overall fire glow effect
    const fireContainer = document.querySelector("[data-fire-container]") as HTMLElement;
    if (fireContainer) {
      gsap.to(fireContainer, {
        filter: "drop-shadow(0 0 30px rgba(255, 107, 53, 0.7)) drop-shadow(0 0 60px rgba(255, 69, 0, 0.4))",
        duration: 2,
        repeat: -1,
        yoyo: true,
        ease: "power2.inOut"
      });

      // Add subtle scale animation for breathing effect
      gsap.to(fireContainer, {
        scale: 1.02,
        duration: 1.5,
        repeat: -1,
        yoyo: true,
        ease: "power2.inOut"
      });
    }

    animationState.isPlaying = true;
  }

  function setupControls(): void {
    const toggleButton = document.getElementById("toggle-animation");
    const resetButton = document.getElementById("reset-animation");

    if (toggleButton) {
      toggleButton.addEventListener("click", () => {
        if (animationState.isPlaying) {
          pauseAnimation();
          toggleButton.textContent = "Resume Animation";
        } else {
          resumeAnimation();
          toggleButton.textContent = "Pause Animation";
        }
      });
    }

    if (resetButton) {
      resetButton.addEventListener("click", () => {
        resetAnimation();
      });
    }
  }

  function pauseAnimation(): void {
    if (animationState.mainTimeline) {
      animationState.mainTimeline.pause();
    }

    // Pause all GSAP animations
    gsap.globalTimeline.pause();
    animationState.isPlaying = false;
  }

  function resumeAnimation(): void {
    if (animationState.mainTimeline) {
      animationState.mainTimeline.resume();
    }

    // Resume all GSAP animations
    gsap.globalTimeline.resume();
    animationState.isPlaying = true;
  }

  function resetAnimation(): void {
    // Kill all existing animations
    gsap.killTweensOf("*");

    // Clear particles
    animationState.particles.forEach(particle => {
      if (particle.parentNode) {
        particle.parentNode.removeChild(particle);
      }
    });
    animationState.particles = [];

    // Reset fire path and container to original state
    const firePath = document.getElementById("fire-path");
    const fireContainer = document.querySelector("[data-fire-container]") as HTMLElement;
    if (firePath) {
      gsap.set(firePath, {
        scaleY: 1,
        scaleX: 1,
        rotation: 0,
        transformOrigin: "50% 100%"
      });
    }
    if (fireContainer) {
      gsap.set(fireContainer, {
        skewX: 0,
        scale: 1,
        filter: "none"
      });
    }

    // Reset fire layers
    const layers = document.querySelectorAll("[data-fire-layer] ellipse");
    layers.forEach((ellipse, index) => {
      const originalCy = index === 0 ? "94.5998" :
                        index === 1 ? "3.9602" :
                        index === 2 ? "77.0002" : "181.72";
      const originalRx = "78.32";
      const originalRy = "78.76";

      gsap.set(ellipse, {
        attr: {
          cy: originalCy,
          rx: originalRx,
          ry: originalRy
        }
      });
    });

    // Restart animation
    setTimeout(() => {
      initFireAnimation();

      const toggleButton = document.getElementById("toggle-animation");
      if (toggleButton) {
        toggleButton.textContent = "Pause Animation";
      }
    }, 100);
  }

  // Cleanup on page unload
  window.addEventListener("beforeunload", () => {
    gsap.killTweensOf("*");
  });
</script>

<style>
  .bg-gradient-radial {
    background: radial-gradient(circle at center, var(--tw-gradient-stops));
  }

  /* Custom fire glow animations */
  @keyframes fireGlow {
    0%, 100% {
      filter: drop-shadow(0 0 20px rgba(255, 107, 53, 0.5));
    }
    50% {
      filter: drop-shadow(0 0 40px rgba(255, 107, 53, 0.8)) drop-shadow(0 0 80px rgba(255, 69, 0, 0.4));
    }
  }

  /* Ensure smooth animations */
  [data-fire-container] {
    will-change: transform, filter;
  }

  [data-fire-layer] ellipse {
    will-change: transform;
  }

  /* Particle optimization */
  [data-particles-container] > div {
    will-change: transform, opacity;
  }

  /* Button hover effects */
  button {
    transition: all 0.2s ease;
  }

  button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  button:active {
    transform: translateY(0);
  }
</style>
