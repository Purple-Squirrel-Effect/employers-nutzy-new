---
import { type CollectionEntry, getCollection } from 'astro:content';
import App from '../../layouts/App.astro';
import { 
  calculateReadingTime, 
  formatDate, 
  getRelatedPosts,
  getPublishedPosts 
} from '../../utils/blog';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  const publishedPosts = getPublishedPosts(blogEntries);
  
  return publishedPosts.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

type Props = {
  entry: CollectionEntry<'blog'>;
};

const { entry } = Astro.props;
const { Content } = await entry.render();

// Calculate reading time
const readingTime = calculateReadingTime(entry.body);

// Get related posts
const allPosts = await getCollection('blog');
const relatedPosts = getRelatedPosts(entry, allPosts, 3);

// SEO metadata
const seoTitle = entry.data.seo?.metaTitle || entry.data.title;
const seoDescription = entry.data.seo?.metaDescription || entry.data.description;
const ogImage = entry.data.seo?.ogImage || entry.data.heroImage?.src || '/img/og-default.jpg';
const canonicalURL = new URL(`/blog/${entry.slug}`, Astro.site);

// Structured data for SEO
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": entry.data.title,
  "description": entry.data.description,
  "image": ogImage,
  "author": {
    "@type": "Person",
    "name": entry.data.author.name,
    "description": entry.data.author.bio
  },
  "publisher": {
    "@type": "Organization",
    "name": "Nutzy",
    "logo": {
      "@type": "ImageObject",
      "url": "/img/logo.svg"
    }
  },
  "datePublished": entry.data.publishDate.toISOString(),
  "dateModified": (entry.data.updatedDate || entry.data.publishDate).toISOString(),
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalURL.toString()
  }
};
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <title>{seoTitle} | Nutzy Blog</title>
    <meta name="description" content={seoDescription} />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Open Graph -->
    <meta property="og:type" content={entry.data.seo?.ogType || 'article'} />
    <meta property="og:title" content={seoTitle} />
    <meta property="og:description" content={seoDescription} />
    <meta property="og:image" content={ogImage} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:site_name" content="Nutzy Blog" />
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content={entry.data.seo?.twitterCard || 'summary_large_image'} />
    <meta name="twitter:title" content={seoTitle} />
    <meta name="twitter:description" content={seoDescription} />
    <meta name="twitter:image" content={ogImage} />
    
    <!-- Article specific meta -->
    <meta property="article:published_time" content={entry.data.publishDate.toISOString()} />
    {entry.data.updatedDate && (
      <meta property="article:modified_time" content={entry.data.updatedDate.toISOString()} />
    )}
    <meta property="article:author" content={entry.data.author.name} />
    <meta property="article:section" content={entry.data.category} />
    {entry.data.tags.map(tag => (
      <meta property="article:tag" content={tag} />
    ))}
    
    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
  </head>
  
  <body>
    <App>
      <!-- Blog Post Header -->
      <article class="max-w-4xl mx-auto px-8 lg:px-16 py-16">
        <header class="mb-12" data-blog-header>
          <!-- Breadcrumb -->
          <nav class="mb-8" aria-label="Breadcrumb">
            <ol class="flex items-center space-x-2 text-sm text-gray-600">
              <li><a href="/" class="hover:text-primary-900 transition-colors">Home</a></li>
              <li class="text-gray-400">/</li>
              <li><a href="/blog" class="hover:text-primary-900 transition-colors">Blog</a></li>
              <li class="text-gray-400">/</li>
              <li class="text-gray-900 font-medium">{entry.data.title}</li>
            </ol>
          </nav>
          
          <!-- Category Badge -->
          <div class="mb-6">
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary-200 text-primary-900">
              {entry.data.category}
            </span>
          </div>
          
          <!-- Title -->
          <h1 class="text-4xl lg:text-6xl font-bold text-primary-900 mb-6 leading-tight" data-blog-title>
            {entry.data.title}
          </h1>
          
          <!-- Description -->
          <p class="text-xl text-gray-700 mb-8 leading-relaxed" data-blog-description>
            {entry.data.description}
          </p>
          
          <!-- Meta Information -->
          <div class="flex flex-wrap items-center gap-6 text-sm text-gray-600 mb-8" data-blog-meta>
            <div class="flex items-center gap-2">
              {entry.data.author.avatar && (
                <img 
                  src={entry.data.author.avatar} 
                  alt={entry.data.author.name}
                  class="w-8 h-8 rounded-full"
                />
              )}
              <span class="font-medium text-gray-900">{entry.data.author.name}</span>
            </div>
            <time datetime={entry.data.publishDate.toISOString()}>
              {formatDate(entry.data.publishDate)}
            </time>
            <span>{readingTime} min read</span>
            {entry.data.updatedDate && (
              <span class="text-gray-500">
                Updated {formatDate(entry.data.updatedDate)}
              </span>
            )}
          </div>
          
          <!-- Tags -->
          <div class="flex flex-wrap gap-2 mb-8" data-blog-tags>
            {entry.data.tags.map(tag => (
              <a 
                href={`/blog?tag=${encodeURIComponent(tag)}`}
                class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors"
              >
                #{tag}
              </a>
            ))}
          </div>
          
          <!-- Hero Image -->
          {entry.data.heroImage && (
            <figure class="mb-12" data-blog-hero-image>
              <img 
                src={entry.data.heroImage.src} 
                alt={entry.data.heroImage.alt}
                class="w-full h-64 lg:h-96 object-cover rounded-lg shadow-lg"
              />
              {entry.data.heroImage.caption && (
                <figcaption class="mt-4 text-sm text-gray-600 text-center italic">
                  {entry.data.heroImage.caption}
                </figcaption>
              )}
            </figure>
          )}
        </header>
        
        <!-- Blog Content -->
        <div class="prose prose-lg max-w-none prose-primary" data-blog-content>
          <Content />
        </div>
        
        <!-- Author Bio -->
        <footer class="mt-16 pt-8 border-t border-gray-200" data-blog-author>
          <div class="flex items-start gap-4">
            {entry.data.author.avatar && (
              <img 
                src={entry.data.author.avatar} 
                alt={entry.data.author.name}
                class="w-16 h-16 rounded-full flex-shrink-0"
              />
            )}
            <div>
              <h3 class="text-lg font-semibold text-gray-900 mb-2">
                {entry.data.author.name}
              </h3>
              {entry.data.author.bio && (
                <p class="text-gray-600 mb-3">{entry.data.author.bio}</p>
              )}
              {entry.data.author.social && (
                <div class="flex gap-3">
                  {entry.data.author.social.twitter && (
                    <a 
                      href={entry.data.author.social.twitter}
                      class="text-gray-500 hover:text-primary-900 transition-colors"
                      aria-label="Twitter"
                    >
                      Twitter
                    </a>
                  )}
                  {entry.data.author.social.linkedin && (
                    <a 
                      href={entry.data.author.social.linkedin}
                      class="text-gray-500 hover:text-primary-900 transition-colors"
                      aria-label="LinkedIn"
                    >
                      LinkedIn
                    </a>
                  )}
                  {entry.data.author.social.github && (
                    <a 
                      href={entry.data.author.social.github}
                      class="text-gray-500 hover:text-primary-900 transition-colors"
                      aria-label="GitHub"
                    >
                      GitHub
                    </a>
                  )}
                </div>
              )}
            </div>
          </div>
        </footer>
      </article>
      
      <!-- Related Posts Section -->
      {relatedPosts.length > 0 && (
        <section class="bg-gray-50 py-16" data-related-posts>
          <div class="max-w-6xl mx-auto px-8 lg:px-16">
            <h2 class="text-3xl font-bold text-primary-900 mb-8">Related Articles</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {relatedPosts.map(post => (
                <article class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
                  {post.data.heroImage && (
                    <img 
                      src={post.data.heroImage.src} 
                      alt={post.data.heroImage.alt}
                      class="w-full h-48 object-cover"
                    />
                  )}
                  <div class="p-6">
                    <div class="mb-3">
                      <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-primary-200 text-primary-900">
                        {post.data.category}
                      </span>
                    </div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">
                      <a href={`/blog/${post.slug}`} class="hover:text-primary-900 transition-colors">
                        {post.data.title}
                      </a>
                    </h3>
                    <p class="text-gray-600 text-sm mb-4 line-clamp-3">
                      {post.data.description}
                    </p>
                    <div class="flex items-center justify-between text-xs text-gray-500">
                      <span>{formatDate(post.data.publishDate)}</span>
                      <span>{calculateReadingTime(post.body)} min read</span>
                    </div>
                  </div>
                </article>
              ))}
            </div>
          </div>
        </section>
      )}
    </App>

    <!-- GSAP Animations -->
    <script>
      import { gsap } from 'gsap';
      import { ScrollTrigger } from 'gsap/ScrollTrigger';

      // Register ScrollTrigger plugin
      gsap.registerPlugin(ScrollTrigger);

      // Check for reduced motion preference
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

      if (!prefersReducedMotion) {
        // Blog header animations
        const blogHeader = document.querySelector('[data-blog-header]');
        if (blogHeader) {
          const breadcrumb = blogHeader.querySelector('nav');
          const category = blogHeader.querySelector('span');
          const title = blogHeader.querySelector('[data-blog-title]');
          const description = blogHeader.querySelector('[data-blog-description]');
          const meta = blogHeader.querySelector('[data-blog-meta]');
          const tags = blogHeader.querySelector('[data-blog-tags]');
          const heroImage = blogHeader.querySelector('[data-blog-hero-image]');

          // Set initial states
          gsap.set([breadcrumb, category, title, description, meta, tags, heroImage], {
            opacity: 0,
            y: 30
          });

          // Create entrance animation timeline
          const headerTimeline = gsap.timeline();
          headerTimeline
            .to(breadcrumb, { opacity: 1, y: 0, duration: 0.5, ease: "power3.out" })
            .to(category, { opacity: 1, y: 0, duration: 0.5, ease: "power3.out" }, "-=0.3")
            .to(title, { opacity: 1, y: 0, duration: 0.6, ease: "power3.out" }, "-=0.3")
            .to(description, { opacity: 1, y: 0, duration: 0.5, ease: "power3.out" }, "-=0.4")
            .to(meta, { opacity: 1, y: 0, duration: 0.5, ease: "power3.out" }, "-=0.3")
            .to(tags, { opacity: 1, y: 0, duration: 0.5, ease: "power3.out" }, "-=0.3");

          if (heroImage) {
            headerTimeline.to(heroImage, { opacity: 1, y: 0, duration: 0.6, ease: "power3.out" }, "-=0.4");
          }
        }

        // Blog content animations
        const blogContent = document.querySelector('[data-blog-content]');
        if (blogContent) {
          const paragraphs = blogContent.querySelectorAll('p');
          const headings = blogContent.querySelectorAll('h1, h2, h3, h4, h5, h6');
          const lists = blogContent.querySelectorAll('ul, ol');
          const images = blogContent.querySelectorAll('img');
          const blockquotes = blogContent.querySelectorAll('blockquote');

          // Animate content elements as they come into view
          [...paragraphs, ...headings, ...lists, ...images, ...blockquotes].forEach((element, index) => {
            gsap.set(element, { opacity: 0, y: 20 });

            ScrollTrigger.create({
              trigger: element,
              start: "top 85%",
              onEnter: () => {
                gsap.to(element, {
                  opacity: 1,
                  y: 0,
                  duration: 0.6,
                  ease: "power3.out",
                  delay: index * 0.05 // Slight stagger for sequential elements
                });
              }
            });
          });
        }

        // Author section animation
        const authorSection = document.querySelector('[data-blog-author]');
        if (authorSection) {
          gsap.set(authorSection, { opacity: 0, y: 30 });

          ScrollTrigger.create({
            trigger: authorSection,
            start: "top 80%",
            onEnter: () => {
              gsap.to(authorSection, { opacity: 1, y: 0, duration: 0.6, ease: "power3.out" });
            }
          });
        }

        // Related posts animations
        const relatedSection = document.querySelector('[data-related-posts]');
        if (relatedSection) {
          const relatedTitle = relatedSection.querySelector('h2');
          const relatedCards = relatedSection.querySelectorAll('article');

          gsap.set([relatedTitle, relatedCards], { opacity: 0, y: 30 });

          ScrollTrigger.create({
            trigger: relatedSection,
            start: "top 80%",
            onEnter: () => {
              const tl = gsap.timeline();
              tl.to(relatedTitle, { opacity: 1, y: 0, duration: 0.6, ease: "power3.out" })
                .to(relatedCards, { opacity: 1, y: 0, duration: 0.5, stagger: 0.1, ease: "power3.out" }, "-=0.3");
            }
          });

          // Related card hover animations
          relatedCards.forEach(card => {
            const image = card.querySelector('img');

            card.addEventListener('mouseenter', () => {
              gsap.to(card, { y: -5, duration: 0.3, ease: "power2.out" });
              if (image) {
                gsap.to(image, { scale: 1.05, duration: 0.3, ease: "power2.out" });
              }
            });

            card.addEventListener('mouseleave', () => {
              gsap.to(card, { y: 0, duration: 0.3, ease: "power2.out" });
              if (image) {
                gsap.to(image, { scale: 1, duration: 0.3, ease: "power2.out" });
              }
            });
          });
        }

        // Tag hover animations
        const tagLinks = document.querySelectorAll('[data-blog-tags] a');
        tagLinks.forEach(tag => {
          tag.addEventListener('mouseenter', () => {
            gsap.to(tag, { scale: 1.1, duration: 0.2, ease: "power2.out" });
          });

          tag.addEventListener('mouseleave', () => {
            gsap.to(tag, { scale: 1, duration: 0.2, ease: "power2.out" });
          });
        });

        // Reading progress indicator
        const progressBar = document.createElement('div');
        progressBar.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 0%;
          height: 3px;
          background: #a855f7;
          z-index: 1000;
          transition: width 0.1s ease;
        `;
        document.body.appendChild(progressBar);

        ScrollTrigger.create({
          trigger: blogContent,
          start: "top center",
          end: "bottom center",
          onUpdate: (self) => {
            const progress = self.progress * 100;
            progressBar.style.width = `${progress}%`;
          },
          onLeave: () => {
            progressBar.style.width = '100%';
          },
          onEnterBack: () => {
            const progress = ScrollTrigger.getById('progress')?.progress || 0;
            progressBar.style.width = `${progress * 100}%`;
          }
        });
      }

      // Refresh ScrollTrigger on window resize
      window.addEventListener('resize', () => {
        ScrollTrigger.refresh();
      });

      // Smooth scroll for anchor links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
    </script>
  </body>
</html>
