---
import App from "../layouts/App.astro";
import ContactForm from "../components/ContactForm.astro";
import ContactInfo from "../components/ContactInfo.astro";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <title>Contact Nutzy - Neem Contact Op | Gen-Z Recruitment Platform</title>
    <meta
      name="description"
      content="Neem contact op met Nutzy voor vragen over ons Gen-Z recruitment platform. We helpen je graag met visuele vacatures, creator partnerships en recruitment innovatie."
    />
    <meta
      name="keywords"
      content="contact nutzy, recruitment contact, gen-z recruitment, visuele vacatures contact, creator partnerships"
    />
    
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content="Contact Nutzy - Neem Contact Op | Gen-Z Recruitment Platform" />
    <meta
      property="og:description"
      content="Neem contact op met Nutzy voor vragen over ons Gen-Z recruitment platform. We helpen je graag met visuele vacatures en creator partnerships."
    />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://nutzy.nl/contact" />
    <meta property="og:image" content="/img/nutzy-og-contact.jpg" />
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Contact Nutzy - Neem Contact Op" />
    <meta
      name="twitter:description"
      content="Neem contact op met Nutzy voor vragen over ons Gen-Z recruitment platform."
    />
    <meta name="twitter:image" content="/img/nutzy-twitter-contact.jpg" />
    
    <!-- Structured Data for Contact Page -->
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "ContactPage",
        "name": "Contact Nutzy",
        "description": "Contact pagina voor Nutzy Gen-Z recruitment platform",
        "url": "https://nutzy.nl/contact",
        "mainEntity": {
          "@type": "Organization",
          "name": "Nutzy",
          "description": "Gen-Z Recruitment Platform voor visuele vacatures en creator partnerships",
          "url": "https://nutzy.nl",
          "contactPoint": {
            "@type": "ContactPoint",
            "telephone": "+31-20-123-4567",
            "email": "hello@nutzy.nl",
            "contactType": "customer service",
            "availableLanguage": ["Dutch", "English"]
          },
          "address": {
            "@type": "PostalAddress",
            "addressCountry": "NL",
            "addressLocality": "Amsterdam"
          }
        }
      }
    </script>
  </head>
  <body>
    <App>
      <!-- Contact Hero Section -->
      <section
        id="contact-hero"
        class="min-h-screen pt-32 bg-gradient-to-br from-primary-900 via-primary-800 to-primary-700 relative overflow-hidden"
        data-contact-hero
      >
        <!-- Background Pattern -->
        <div class="absolute inset-0 h-full w-full opacity-20">
          <img
            src="/svg/particle/contact.svg"
            alt="Contact illustration"
            class="w-full h-full object-cover"
            loading="lazy"
          />
        </div>
        
        <!-- Content Container -->
        <div class="relative z-10 min-h-screen flex items-center justify-center px-4 sm:px-6 lg:px-8 xl:px-12">
          <div class="max-w-7xl mx-auto w-full">
            <!-- Hero Content -->
            <div class="text-center mb-12 md:mb-16" data-hero-content>
              <h1 class="text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold text-white mb-4 md:mb-6 vsk-text-balance">
                Laten we <span class="text-secondary-300">samen</span><br />
                iets <span class="text-secondary-200">moois</span> bouwen
              </h1>
              <p class="text-lg sm:text-xl md:text-2xl text-white/90 max-w-3xl mx-auto leading-relaxed mb-6 md:mb-8 px-4">
                Heb je vragen over ons platform, wil je een demo, of ben je ge√Ønteresseerd in een samenwerking?
                We horen graag van je!
              </p>
            </div>

            <!-- Contact Content Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 md:gap-12 lg:gap-16 items-start">
              <!-- Contact Information -->
              <div data-contact-info class="order-2 lg:order-1">
                <ContactInfo />
              </div>

              <!-- Contact Form -->
              <div data-contact-form class="order-1 lg:order-2">
                <ContactForm />
              </div>
            </div>
          </div>
        </div>
      </section>
    </App>

    <!-- GSAP Animations Script -->
    <script>
      import { gsap } from "gsap";
      import { ScrollTrigger } from "gsap/ScrollTrigger";

      // Register GSAP plugins
      gsap.registerPlugin(ScrollTrigger);

      document.addEventListener("DOMContentLoaded", () => {
        // Check for reduced motion preference
        const prefersReducedMotion = window.matchMedia(
          "(prefers-reduced-motion: reduce)"
        ).matches;

        if (prefersReducedMotion) {
          console.log("Reduced motion detected, skipping contact page animations");
          return;
        }

        // Initialize contact page animations
        initContactAnimations();
      });

      function initContactAnimations() {
        // Hero content animation
        const heroContent = document.querySelector("[data-hero-content]");
        const contactInfo = document.querySelector("[data-contact-info]");
        const contactForm = document.querySelector("[data-contact-form]");

        if (heroContent) {
          // Animate hero title and description
          const title = heroContent.querySelector("h1");
          const description = heroContent.querySelector("p");

          if (title) {
            gsap.fromTo(
              title,
              {
                opacity: 0,
                y: 50,
                scale: 0.95
              },
              {
                opacity: 1,
                y: 0,
                scale: 1,
                duration: 1.2,
                ease: "power2.out",
                delay: 0.2
              }
            );
          }

          if (description) {
            gsap.fromTo(
              description,
              {
                opacity: 0,
                y: 30
              },
              {
                opacity: 1,
                y: 0,
                duration: 1,
                delay: 0.6,
                ease: "power2.out"
              }
            );
          }
        }

        // Contact info animation
        if (contactInfo) {
          gsap.fromTo(
            contactInfo,
            {
              opacity: 0,
              x: -50
            },
            {
              opacity: 1,
              x: 0,
              duration: 1,
              delay: 0.8,
              ease: "power2.out"
            }
          );
        }

        // Contact form animation
        if (contactForm) {
          gsap.fromTo(
            contactForm,
            {
              opacity: 0,
              x: 50
            },
            {
              opacity: 1,
              x: 0,
              duration: 1,
              delay: 1,
              ease: "power2.out"
            }
          );
        }

        // Animate contact method cards with stagger
        const contactMethodCards = document.querySelectorAll("[data-contact-method]");
        if (contactMethodCards.length > 0) {
          gsap.fromTo(
            contactMethodCards,
            {
              opacity: 0,
              y: 30,
              scale: 0.95
            },
            {
              opacity: 1,
              y: 0,
              scale: 1,
              duration: 0.8,
              delay: 1.2,
              stagger: 0.1,
              ease: "power2.out"
            }
          );
        }

        // Animate quick action cards
        const quickActionCards = document.querySelectorAll("[data-quick-action]");
        if (quickActionCards.length > 0) {
          gsap.fromTo(
            quickActionCards,
            {
              opacity: 0,
              y: 20,
              scale: 0.9
            },
            {
              opacity: 1,
              y: 0,
              scale: 1,
              duration: 0.6,
              delay: 1.6,
              stagger: 0.1,
              ease: "power2.out"
            }
          );
        }

        // Animate form fields with stagger
        const formGroups = document.querySelectorAll("[data-field-group]");
        if (formGroups.length > 0) {
          gsap.fromTo(
            formGroups,
            {
              opacity: 0,
              y: 20
            },
            {
              opacity: 1,
              y: 0,
              duration: 0.6,
              delay: 1.4,
              stagger: 0.1,
              ease: "power2.out"
            }
          );
        }

        // Enhanced hover animations for interactive elements
        setupHoverAnimations();

        // Scroll-triggered animations for elements that come into view
        setupScrollAnimations();
      }

      function setupHoverAnimations() {
        // Contact method cards hover effect
        const contactMethodCards = document.querySelectorAll("[data-contact-method]");
        contactMethodCards.forEach((card) => {
          const cardElement = card as HTMLElement;

          cardElement.addEventListener("mouseenter", () => {
            gsap.to(cardElement, {
              scale: 1.05,
              y: -5,
              duration: 0.3,
              ease: "power2.out"
            });
          });

          cardElement.addEventListener("mouseleave", () => {
            gsap.to(cardElement, {
              scale: 1,
              y: 0,
              duration: 0.3,
              ease: "power2.out"
            });
          });
        });

        // Quick action cards hover effect
        const quickActionCards = document.querySelectorAll("[data-quick-action]");
        quickActionCards.forEach((card) => {
          const cardElement = card as HTMLElement;

          cardElement.addEventListener("mouseenter", () => {
            gsap.to(cardElement, {
              scale: 1.05,
              duration: 0.3,
              ease: "power2.out"
            });
          });

          cardElement.addEventListener("mouseleave", () => {
            gsap.to(cardElement, {
              scale: 1,
              duration: 0.3,
              ease: "power2.out"
            });
          });
        });

        // Submit button hover effect
        const submitButton = document.querySelector("[data-submit-button]");
        if (submitButton) {
          const buttonElement = submitButton as HTMLElement;

          buttonElement.addEventListener("mouseenter", () => {
            if (!buttonElement.disabled) {
              gsap.to(buttonElement, {
                scale: 1.05,
                duration: 0.3,
                ease: "power2.out"
              });
            }
          });

          buttonElement.addEventListener("mouseleave", () => {
            gsap.to(buttonElement, {
              scale: 1,
              duration: 0.3,
              ease: "power2.out"
            });
          });
        }

        // Form field focus animations
        const formFields = document.querySelectorAll("input, textarea, select");
        formFields.forEach((field) => {
          const fieldElement = field as HTMLElement;

          fieldElement.addEventListener("focus", () => {
            gsap.to(fieldElement, {
              scale: 1.02,
              duration: 0.2,
              ease: "power2.out"
            });
          });

          fieldElement.addEventListener("blur", () => {
            gsap.to(fieldElement, {
              scale: 1,
              duration: 0.2,
              ease: "power2.out"
            });
          });
        });
      }

      function setupScrollAnimations() {
        // Animate elements that come into view on scroll
        const animateOnScroll = document.querySelectorAll("[data-contact-header], [data-office-hours], [data-privacy-notice]");

        animateOnScroll.forEach((element) => {
          gsap.fromTo(
            element,
            {
              opacity: 0,
              y: 30
            },
            {
              opacity: 1,
              y: 0,
              duration: 0.8,
              ease: "power2.out",
              scrollTrigger: {
                trigger: element,
                start: "top 80%",
                end: "bottom 20%",
                toggleActions: "play none none reverse"
              }
            }
          );
        });

        // Background pattern subtle animation
        const backgroundPattern = document.querySelector(".absolute.inset-0.opacity-10");
        if (backgroundPattern) {
          gsap.to(backgroundPattern, {
            rotation: 2,
            scale: 1.05,
            duration: 20,
            ease: "none",
            repeat: -1,
            yoyo: true
          });
        }
      }

      // Form submission success animation
      function animateFormSuccess() {
        const successMessage = document.getElementById("success-message");
        if (successMessage && !successMessage.classList.contains("hidden")) {
          gsap.fromTo(
            successMessage,
            {
              opacity: 0,
              scale: 0.8,
              y: 20
            },
            {
              opacity: 1,
              scale: 1,
              y: 0,
              duration: 0.6,
              ease: "back.out(1.7)"
            }
          );
        }
      }

      // Form submission error animation
      function animateFormError() {
        const errorMessage = document.getElementById("error-message");
        if (errorMessage && !errorMessage.classList.contains("hidden")) {
          gsap.fromTo(
            errorMessage,
            {
              opacity: 0,
              scale: 0.8,
              y: 20
            },
            {
              opacity: 1,
              scale: 1,
              y: 0,
              duration: 0.6,
              ease: "back.out(1.7)"
            }
          );
        }
      }

      // Export functions for use in form component
      window.animateFormSuccess = animateFormSuccess;
      window.animateFormError = animateFormError;
    </script>
  </body>
</html>
